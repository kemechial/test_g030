
test_g030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001670  08001670  00002670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016a8  080016a8  000026a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016ac  080016ac  000026ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080016b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080016bc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080016bc  00003124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008262  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001250  00000000  00000000  0000b296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  0000c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a4  00000000  00000000  0000cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de2  00000000  00000000  0000cf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008605  00000000  00000000  00020d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e750  00000000  00000000  00029373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001448  00000000  00000000  000a7b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a8f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001658 	.word	0x08001658

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001658 	.word	0x08001658

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <SysTick_Handler>:

#include "stm32g0xx_hal.h"


void SysTick_Handler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800021c:	f000 f962 	bl	80004e4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000220:	f000 fa5a 	bl	80006d8 <HAL_SYSTICK_IRQHandler>


}
 8000224:	46c0      	nop			@ (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <main>:
void Error_handler(void);

uint8_t data_buffer[100]={0};

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	HAL_Init();
 8000232:	f000 f8ed 	bl	8000410 <HAL_Init>
	SystemClockConfig();
 8000236:	f000 f831 	bl	800029c <SystemClockConfig>
	UART1_Init();
 800023a:	f000 f835 	bl	80002a8 <UART1_Init>

	while(1){
    uint8_t received_data;


    uint32_t count = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
    while(1){
    	HAL_UART_Receive(&huart1, &received_data, 1, HAL_MAX_DELAY);
 8000242:	2301      	movs	r3, #1
 8000244:	425b      	negs	r3, r3
 8000246:	1cf9      	adds	r1, r7, #3
 8000248:	4812      	ldr	r0, [pc, #72]	@ (8000294 <main+0x68>)
 800024a:	2201      	movs	r2, #1
 800024c:	f000 fd5c 	bl	8000d08 <HAL_UART_Receive>
    	if(received_data == '\r'){
 8000250:	1cfb      	adds	r3, r7, #3
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b0d      	cmp	r3, #13
 8000256:	d007      	beq.n	8000268 <main+0x3c>
    		break;
    			}else{
    		        data_buffer[count++] = received_data;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	1c5a      	adds	r2, r3, #1
 800025c:	607a      	str	r2, [r7, #4]
 800025e:	1cfa      	adds	r2, r7, #3
 8000260:	7811      	ldrb	r1, [r2, #0]
 8000262:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <main+0x6c>)
 8000264:	54d1      	strb	r1, [r2, r3]
    	HAL_UART_Receive(&huart1, &received_data, 1, HAL_MAX_DELAY);
 8000266:	e7ec      	b.n	8000242 <main+0x16>
    		break;
 8000268:	46c0      	nop			@ (mov r8, r8)
    			}
    }

    data_buffer[count++]  = '\r';
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	4a09      	ldr	r2, [pc, #36]	@ (8000298 <main+0x6c>)
 8000272:	210d      	movs	r1, #13
 8000274:	54d1      	strb	r1, [r2, r3]
    data_buffer[count++]  = '\n';
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	1c5a      	adds	r2, r3, #1
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	4a06      	ldr	r2, [pc, #24]	@ (8000298 <main+0x6c>)
 800027e:	210a      	movs	r1, #10
 8000280:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	b29a      	uxth	r2, r3
 8000286:	2301      	movs	r3, #1
 8000288:	425b      	negs	r3, r3
 800028a:	4903      	ldr	r1, [pc, #12]	@ (8000298 <main+0x6c>)
 800028c:	4801      	ldr	r0, [pc, #4]	@ (8000294 <main+0x68>)
 800028e:	f000 fc97 	bl	8000bc0 <HAL_UART_Transmit>
	while(1){
 8000292:	e7d4      	b.n	800023e <main+0x12>
 8000294:	20000028 	.word	0x20000028
 8000298:	200000bc 	.word	0x200000bc

0800029c <SystemClockConfig>:
	}
	return 0;
}

void SystemClockConfig(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0




}
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <UART1_Init>:

void UART1_Init()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <UART1_Init+0x48>)
 80002ae:	4a11      	ldr	r2, [pc, #68]	@ (80002f4 <UART1_Init+0x4c>)
 80002b0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <UART1_Init+0x48>)
 80002b4:	22e1      	movs	r2, #225	@ 0xe1
 80002b6:	0252      	lsls	r2, r2, #9
 80002b8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <UART1_Init+0x48>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <UART1_Init+0x48>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <UART1_Init+0x48>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <UART1_Init+0x48>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <UART1_Init+0x48>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]

	if(HAL_UART_Init(&huart1) != HAL_OK){
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <UART1_Init+0x48>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fc1a 	bl	8000b14 <HAL_UART_Init>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <UART1_Init+0x40>
		Error_handler();
 80002e4:	f000 f808 	bl	80002f8 <Error_handler>
	}

}
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40013800 	.word	0x40013800

080002f8 <Error_handler>:

void Error_handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

   while(1);
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	e7fd      	b.n	80002fc <Error_handler+0x4>

08000300 <HAL_MspInit>:
 *      Author: Lenovo
 */
#include "stm32g0xx_hal.h"

void HAL_MspInit(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//STM32G030 does not have priority grouping otherwise
	// there would be a HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) call here.

}
 8000304:	46c0      	nop			@ (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b08b      	sub	sp, #44	@ 0x2c
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//Enable the clock for uart and GPIO pins
	__HAL_RCC_USART1_CLK_ENABLE();
 8000314:	4b25      	ldr	r3, [pc, #148]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 8000316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000318:	4b24      	ldr	r3, [pc, #144]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 800031a:	2180      	movs	r1, #128	@ 0x80
 800031c:	01c9      	lsls	r1, r1, #7
 800031e:	430a      	orrs	r2, r1
 8000320:	641a      	str	r2, [r3, #64]	@ 0x40
 8000322:	4b22      	ldr	r3, [pc, #136]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 8000324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000326:	2380      	movs	r3, #128	@ 0x80
 8000328:	01db      	lsls	r3, r3, #7
 800032a:	4013      	ands	r3, r2
 800032c:	613b      	str	r3, [r7, #16]
 800032e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b1e      	ldr	r3, [pc, #120]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 8000332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 8000336:	2101      	movs	r1, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	635a      	str	r2, [r3, #52]	@ 0x34
 800033c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ac <HAL_UART_MspInit+0xa0>)
 800033e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000340:	2201      	movs	r2, #1
 8000342:	4013      	ands	r3, r2
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]

	//Do the pin mux configurations
	gpio_uart.Pin = GPIO_PIN_9;
 8000348:	2114      	movs	r1, #20
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	601a      	str	r2, [r3, #0]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000352:	000c      	movs	r4, r1
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
	gpio_uart.Pull = GPIO_PULLUP;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2201      	movs	r2, #1
 800035e:	609a      	str	r2, [r3, #8]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
	gpio_uart.Alternate = GPIO_AF1_USART1; //USART1 TX
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2201      	movs	r2, #1
 800036a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800036c:	193a      	adds	r2, r7, r4
 800036e:	23a0      	movs	r3, #160	@ 0xa0
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	0011      	movs	r1, r2
 8000374:	0018      	movs	r0, r3
 8000376:	f000 f9bb 	bl	80006f0 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10; //USART1 RX
 800037a:	0021      	movs	r1, r4
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2280      	movs	r2, #128	@ 0x80
 8000380:	00d2      	lsls	r2, r2, #3
 8000382:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000384:	187a      	adds	r2, r7, r1
 8000386:	23a0      	movs	r3, #160	@ 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f000 f9af 	bl	80006f0 <HAL_GPIO_Init>

	//Enable IRQ and set up the priority
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000392:	201b      	movs	r0, #27
 8000394:	f000 f983 	bl	800069e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2101      	movs	r1, #1
 800039c:	201b      	movs	r0, #27
 800039e:	f000 f969 	bl	8000674 <HAL_NVIC_SetPriority>

}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b00b      	add	sp, #44	@ 0x2c
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	40021000 	.word	0x40021000

080003b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b4:	46c0      	nop			@ (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f7ff fff6 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	@ (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f001 f911 	bl	8001610 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80003ee:	f7ff ff1d 	bl	800022c <main>

080003f2 <LoopForever>:

LoopForever:
  b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000400:	080016b0 	.word	0x080016b0
  ldr r2, =_sbss
 8000404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000408:	20000124 	.word	0x20000124

0800040c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_IRQHandler>
	...

08000410 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000416:	1dfb      	adds	r3, r7, #7
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <HAL_Init+0x3c>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <HAL_Init+0x3c>)
 8000422:	2180      	movs	r1, #128	@ 0x80
 8000424:	0049      	lsls	r1, r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042a:	2003      	movs	r0, #3
 800042c:	f000 f810 	bl	8000450 <HAL_InitTick>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d003      	beq.n	800043c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e001      	b.n	8000440 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800043c:	f7ff ff60 	bl	8000300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
}
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40022000 	.word	0x40022000

08000450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000458:	230f      	movs	r3, #15
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000460:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <HAL_InitTick+0x88>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d02b      	beq.n	80004c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000468:	4b1c      	ldr	r3, [pc, #112]	@ (80004dc <HAL_InitTick+0x8c>)
 800046a:	681c      	ldr	r4, [r3, #0]
 800046c:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <HAL_InitTick+0x88>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	0019      	movs	r1, r3
 8000472:	23fa      	movs	r3, #250	@ 0xfa
 8000474:	0098      	lsls	r0, r3, #2
 8000476:	f7ff fe43 	bl	8000100 <__udivsi3>
 800047a:	0003      	movs	r3, r0
 800047c:	0019      	movs	r1, r3
 800047e:	0020      	movs	r0, r4
 8000480:	f7ff fe3e 	bl	8000100 <__udivsi3>
 8000484:	0003      	movs	r3, r0
 8000486:	0018      	movs	r0, r3
 8000488:	f000 f919 	bl	80006be <HAL_SYSTICK_Config>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d112      	bne.n	80004b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b03      	cmp	r3, #3
 8000494:	d80a      	bhi.n	80004ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	2200      	movs	r2, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 f8e8 	bl	8000674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <HAL_InitTick+0x90>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e00d      	b.n	80004c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80004ac:	230f      	movs	r3, #15
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e008      	b.n	80004c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004b6:	230f      	movs	r3, #15
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	e003      	b.n	80004c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004c0:	230f      	movs	r3, #15
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80004c8:	230f      	movs	r3, #15
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	781b      	ldrb	r3, [r3, #0]
}
 80004ce:	0018      	movs	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b005      	add	sp, #20
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000004 	.word	0x20000004

080004e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <HAL_IncTick+0x1c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <HAL_IncTick+0x20>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	18d2      	adds	r2, r2, r3
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <HAL_IncTick+0x20>)
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	20000008 	.word	0x20000008
 8000504:	20000120 	.word	0x20000120

08000508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  return uwTick;
 800050c:	4b02      	ldr	r3, [pc, #8]	@ (8000518 <HAL_GetTick+0x10>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	20000120 	.word	0x20000120

0800051c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b7f      	cmp	r3, #127	@ 0x7f
 800052e:	d809      	bhi.n	8000544 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	231f      	movs	r3, #31
 8000538:	401a      	ands	r2, r3
 800053a:	4b04      	ldr	r3, [pc, #16]	@ (800054c <__NVIC_EnableIRQ+0x30>)
 800053c:	2101      	movs	r1, #1
 800053e:	4091      	lsls	r1, r2
 8000540:	000a      	movs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}
 800054c:	e000e100 	.word	0xe000e100

08000550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	0002      	movs	r2, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b7f      	cmp	r3, #127	@ 0x7f
 8000564:	d828      	bhi.n	80005b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000566:	4a2f      	ldr	r2, [pc, #188]	@ (8000624 <__NVIC_SetPriority+0xd4>)
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b25b      	sxtb	r3, r3
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	33c0      	adds	r3, #192	@ 0xc0
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	589b      	ldr	r3, [r3, r2]
 8000576:	1dfa      	adds	r2, r7, #7
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	0011      	movs	r1, r2
 800057c:	2203      	movs	r2, #3
 800057e:	400a      	ands	r2, r1
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	21ff      	movs	r1, #255	@ 0xff
 8000584:	4091      	lsls	r1, r2
 8000586:	000a      	movs	r2, r1
 8000588:	43d2      	mvns	r2, r2
 800058a:	401a      	ands	r2, r3
 800058c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	019b      	lsls	r3, r3, #6
 8000592:	22ff      	movs	r2, #255	@ 0xff
 8000594:	401a      	ands	r2, r3
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	0018      	movs	r0, r3
 800059c:	2303      	movs	r3, #3
 800059e:	4003      	ands	r3, r0
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a4:	481f      	ldr	r0, [pc, #124]	@ (8000624 <__NVIC_SetPriority+0xd4>)
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	089b      	lsrs	r3, r3, #2
 80005ae:	430a      	orrs	r2, r1
 80005b0:	33c0      	adds	r3, #192	@ 0xc0
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005b6:	e031      	b.n	800061c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000628 <__NVIC_SetPriority+0xd8>)
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0019      	movs	r1, r3
 80005c0:	230f      	movs	r3, #15
 80005c2:	400b      	ands	r3, r1
 80005c4:	3b08      	subs	r3, #8
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	3306      	adds	r3, #6
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	3304      	adds	r3, #4
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	0011      	movs	r1, r2
 80005d8:	2203      	movs	r2, #3
 80005da:	400a      	ands	r2, r1
 80005dc:	00d2      	lsls	r2, r2, #3
 80005de:	21ff      	movs	r1, #255	@ 0xff
 80005e0:	4091      	lsls	r1, r2
 80005e2:	000a      	movs	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	22ff      	movs	r2, #255	@ 0xff
 80005f0:	401a      	ands	r2, r3
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	2303      	movs	r3, #3
 80005fa:	4003      	ands	r3, r0
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <__NVIC_SetPriority+0xd8>)
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	001c      	movs	r4, r3
 8000608:	230f      	movs	r3, #15
 800060a:	4023      	ands	r3, r4
 800060c:	3b08      	subs	r3, #8
 800060e:	089b      	lsrs	r3, r3, #2
 8000610:	430a      	orrs	r2, r1
 8000612:	3306      	adds	r3, #6
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	18c3      	adds	r3, r0, r3
 8000618:	3304      	adds	r3, #4
 800061a:	601a      	str	r2, [r3, #0]
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b003      	add	sp, #12
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	2380      	movs	r3, #128	@ 0x80
 800063a:	045b      	lsls	r3, r3, #17
 800063c:	429a      	cmp	r2, r3
 800063e:	d301      	bcc.n	8000644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000640:	2301      	movs	r3, #1
 8000642:	e010      	b.n	8000666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <SysTick_Config+0x44>)
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	3a01      	subs	r2, #1
 800064a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064c:	2301      	movs	r3, #1
 800064e:	425b      	negs	r3, r3
 8000650:	2103      	movs	r1, #3
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff7c 	bl	8000550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SysTick_Config+0x44>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <SysTick_Config+0x44>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	e000e010 	.word	0xe000e010

08000674 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	210f      	movs	r1, #15
 8000680:	187b      	adds	r3, r7, r1
 8000682:	1c02      	adds	r2, r0, #0
 8000684:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	187b      	adds	r3, r7, r1
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25b      	sxtb	r3, r3
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff5d 	bl	8000550 <__NVIC_SetPriority>
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b004      	add	sp, #16
 800069c:	bd80      	pop	{r7, pc}

0800069e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	0002      	movs	r2, r0
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff ff33 	bl	800051c <__NVIC_EnableIRQ>
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}

080006be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ffaf 	bl	800062c <SysTick_Config>
 80006ce:	0003      	movs	r3, r0
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80006dc:	f000 f803 	bl	80006e6 <HAL_SYSTICK_Callback>
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006fe:	e147      	b.n	8000990 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	4091      	lsls	r1, r2
 800070a:	000a      	movs	r2, r1
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d100      	bne.n	8000718 <HAL_GPIO_Init+0x28>
 8000716:	e138      	b.n	800098a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2203      	movs	r2, #3
 800071e:	4013      	ands	r3, r2
 8000720:	2b01      	cmp	r3, #1
 8000722:	d005      	beq.n	8000730 <HAL_GPIO_Init+0x40>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2203      	movs	r2, #3
 800072a:	4013      	ands	r3, r2
 800072c:	2b02      	cmp	r3, #2
 800072e:	d130      	bne.n	8000792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2203      	movs	r2, #3
 800073c:	409a      	lsls	r2, r3
 800073e:	0013      	movs	r3, r2
 8000740:	43da      	mvns	r2, r3
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	409a      	lsls	r2, r3
 8000752:	0013      	movs	r3, r2
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4313      	orrs	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000766:	2201      	movs	r2, #1
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
 800076c:	0013      	movs	r3, r2
 800076e:	43da      	mvns	r2, r3
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	091b      	lsrs	r3, r3, #4
 800077c:	2201      	movs	r2, #1
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	4313      	orrs	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2203      	movs	r2, #3
 8000798:	4013      	ands	r3, r2
 800079a:	2b03      	cmp	r3, #3
 800079c:	d017      	beq.n	80007ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	2203      	movs	r2, #3
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0013      	movs	r3, r2
 80007ae:	43da      	mvns	r2, r3
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	4013      	ands	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	409a      	lsls	r2, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d123      	bne.n	8000822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	08da      	lsrs	r2, r3, #3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3208      	adds	r2, #8
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	58d3      	ldr	r3, [r2, r3]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2207      	movs	r2, #7
 80007ec:	4013      	ands	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	220f      	movs	r2, #15
 80007f2:	409a      	lsls	r2, r3
 80007f4:	0013      	movs	r3, r2
 80007f6:	43da      	mvns	r2, r3
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2107      	movs	r1, #7
 8000806:	400b      	ands	r3, r1
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	409a      	lsls	r2, r3
 800080c:	0013      	movs	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	08da      	lsrs	r2, r3, #3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3208      	adds	r2, #8
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	6939      	ldr	r1, [r7, #16]
 8000820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	409a      	lsls	r2, r3
 8000830:	0013      	movs	r3, r2
 8000832:	43da      	mvns	r2, r3
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	4013      	ands	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2203      	movs	r2, #3
 8000840:	401a      	ands	r2, r3
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	23c0      	movs	r3, #192	@ 0xc0
 800085c:	029b      	lsls	r3, r3, #10
 800085e:	4013      	ands	r3, r2
 8000860:	d100      	bne.n	8000864 <HAL_GPIO_Init+0x174>
 8000862:	e092      	b.n	800098a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000864:	4a50      	ldr	r2, [pc, #320]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	3318      	adds	r3, #24
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	589b      	ldr	r3, [r3, r2]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2203      	movs	r2, #3
 8000876:	4013      	ands	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	220f      	movs	r2, #15
 800087c:	409a      	lsls	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	43da      	mvns	r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	23a0      	movs	r3, #160	@ 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	429a      	cmp	r2, r3
 8000890:	d013      	beq.n	80008ba <HAL_GPIO_Init+0x1ca>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a45      	ldr	r2, [pc, #276]	@ (80009ac <HAL_GPIO_Init+0x2bc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d00d      	beq.n	80008b6 <HAL_GPIO_Init+0x1c6>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a44      	ldr	r2, [pc, #272]	@ (80009b0 <HAL_GPIO_Init+0x2c0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d007      	beq.n	80008b2 <HAL_GPIO_Init+0x1c2>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a43      	ldr	r2, [pc, #268]	@ (80009b4 <HAL_GPIO_Init+0x2c4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_GPIO_Init+0x1be>
 80008aa:	2303      	movs	r3, #3
 80008ac:	e006      	b.n	80008bc <HAL_GPIO_Init+0x1cc>
 80008ae:	2305      	movs	r3, #5
 80008b0:	e004      	b.n	80008bc <HAL_GPIO_Init+0x1cc>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e002      	b.n	80008bc <HAL_GPIO_Init+0x1cc>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <HAL_GPIO_Init+0x1cc>
 80008ba:	2300      	movs	r3, #0
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	2103      	movs	r1, #3
 80008c0:	400a      	ands	r2, r1
 80008c2:	00d2      	lsls	r2, r2, #3
 80008c4:	4093      	lsls	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80008cc:	4936      	ldr	r1, [pc, #216]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	3318      	adds	r3, #24
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	43da      	mvns	r2, r3
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	035b      	lsls	r3, r3, #13
 80008f2:	4013      	ands	r3, r2
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	43da      	mvns	r2, r3
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	039b      	lsls	r3, r3, #14
 800091c:	4013      	ands	r3, r2
 800091e:	d003      	beq.n	8000928 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800092e:	4a1e      	ldr	r2, [pc, #120]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000930:	2384      	movs	r3, #132	@ 0x84
 8000932:	58d3      	ldr	r3, [r2, r3]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	029b      	lsls	r3, r3, #10
 8000948:	4013      	ands	r3, r2
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000954:	4914      	ldr	r1, [pc, #80]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000956:	2284      	movs	r2, #132	@ 0x84
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	58d3      	ldr	r3, [r2, r3]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	025b      	lsls	r3, r3, #9
 8000976:	4013      	ands	r3, r2
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000982:	4909      	ldr	r1, [pc, #36]	@ (80009a8 <HAL_GPIO_Init+0x2b8>)
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	40da      	lsrs	r2, r3
 8000998:	1e13      	subs	r3, r2, #0
 800099a:	d000      	beq.n	800099e <HAL_GPIO_Init+0x2ae>
 800099c:	e6b0      	b.n	8000700 <HAL_GPIO_Init+0x10>
  }
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b006      	add	sp, #24
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021800 	.word	0x40021800
 80009ac:	50000400 	.word	0x50000400
 80009b0:	50000800 	.word	0x50000800
 80009b4:	50000c00 	.word	0x50000c00

080009b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	23e0      	movs	r3, #224	@ 0xe0
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	4013      	ands	r3, r2
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009d6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2238      	movs	r2, #56	@ 0x38
 80009dc:	4013      	ands	r3, r2
 80009de:	d10f      	bne.n	8000a00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80009e0:	4b39      	ldr	r3, [pc, #228]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0adb      	lsrs	r3, r3, #11
 80009e6:	2207      	movs	r2, #7
 80009e8:	4013      	ands	r3, r2
 80009ea:	2201      	movs	r2, #1
 80009ec:	409a      	lsls	r2, r3
 80009ee:	0013      	movs	r3, r2
 80009f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <HAL_RCC_GetSysClockFreq+0xfc>)
 80009f6:	f7ff fb83 	bl	8000100 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e05d      	b.n	8000abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a00:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2238      	movs	r2, #56	@ 0x38
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d102      	bne.n	8000a12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	e054      	b.n	8000abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2238      	movs	r2, #56	@ 0x38
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b10      	cmp	r3, #16
 8000a1c:	d138      	bne.n	8000a90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	2203      	movs	r2, #3
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	2207      	movs	r2, #7
 8000a30:	4013      	ands	r3, r2
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d10d      	bne.n	8000a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	4824      	ldr	r0, [pc, #144]	@ (8000ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8000a40:	f7ff fb5e 	bl	8000100 <__udivsi3>
 8000a44:	0003      	movs	r3, r0
 8000a46:	0019      	movs	r1, r3
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	227f      	movs	r2, #127	@ 0x7f
 8000a50:	4013      	ands	r3, r2
 8000a52:	434b      	muls	r3, r1
 8000a54:	617b      	str	r3, [r7, #20]
        break;
 8000a56:	e00d      	b.n	8000a74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	481c      	ldr	r0, [pc, #112]	@ (8000acc <HAL_RCC_GetSysClockFreq+0xfc>)
 8000a5c:	f7ff fb50 	bl	8000100 <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0019      	movs	r1, r3
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	227f      	movs	r2, #127	@ 0x7f
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	434b      	muls	r3, r1
 8000a70:	617b      	str	r3, [r7, #20]
        break;
 8000a72:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0f5b      	lsrs	r3, r3, #29
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	3301      	adds	r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	6978      	ldr	r0, [r7, #20]
 8000a86:	f7ff fb3b 	bl	8000100 <__udivsi3>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	e015      	b.n	8000abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2238      	movs	r2, #56	@ 0x38
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b20      	cmp	r3, #32
 8000a9a:	d103      	bne.n	8000aa4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	e00b      	b.n	8000abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2238      	movs	r2, #56	@ 0x38
 8000aaa:	4013      	ands	r3, r2
 8000aac:	2b18      	cmp	r3, #24
 8000aae:	d103      	bne.n	8000ab8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8000ab0:	23fa      	movs	r3, #250	@ 0xfa
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	e001      	b.n	8000abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000abc:	693b      	ldr	r3, [r7, #16]
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b006      	add	sp, #24
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	00f42400 	.word	0x00f42400
 8000ad0:	007a1200 	.word	0x007a1200

08000ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8000aec:	f7ff fff2 	bl	8000ad4 <HAL_RCC_GetHCLKFreq>
 8000af0:	0004      	movs	r4, r0
 8000af2:	f7ff ff61 	bl	80009b8 <LL_RCC_GetAPB1Prescaler>
 8000af6:	0003      	movs	r3, r0
 8000af8:	0b1a      	lsrs	r2, r3, #12
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	58d3      	ldr	r3, [r2, r3]
 8000b00:	221f      	movs	r2, #31
 8000b02:	4013      	ands	r3, r2
 8000b04:	40dc      	lsrs	r4, r3
 8000b06:	0023      	movs	r3, r4
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	08001670 	.word	0x08001670

08000b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e046      	b.n	8000bb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2288      	movs	r2, #136	@ 0x88
 8000b2a:	589b      	ldr	r3, [r3, r2]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2284      	movs	r2, #132	@ 0x84
 8000b34:	2100      	movs	r1, #0
 8000b36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff fbe6 	bl	800030c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2288      	movs	r2, #136	@ 0x88
 8000b44:	2124      	movs	r1, #36	@ 0x24
 8000b46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2101      	movs	r1, #1
 8000b54:	438a      	bics	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fb20 	bl	80011a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f9b2 	bl	8000ed4 <UART_SetConfig>
 8000b70:	0003      	movs	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e01c      	b.n	8000bb4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <HAL_UART_Init+0xa8>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	212a      	movs	r1, #42	@ 0x2a
 8000b96:	438a      	bics	r2, r1
 8000b98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fbaf 	bl	8001310 <UART_CheckIdleState>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	ffffb7ff 	.word	0xffffb7ff

08000bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2288      	movs	r2, #136	@ 0x88
 8000bd4:	589b      	ldr	r3, [r3, r2]
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	d000      	beq.n	8000bdc <HAL_UART_Transmit+0x1c>
 8000bda:	e090      	b.n	8000cfe <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_UART_Transmit+0x2a>
 8000be2:	1dbb      	adds	r3, r7, #6
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e088      	b.n	8000d00 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d109      	bne.n	8000c0e <HAL_UART_Transmit+0x4e>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d105      	bne.n	8000c0e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4013      	ands	r3, r2
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e078      	b.n	8000d00 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2290      	movs	r2, #144	@ 0x90
 8000c12:	2100      	movs	r1, #0
 8000c14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2288      	movs	r2, #136	@ 0x88
 8000c1a:	2121      	movs	r1, #33	@ 0x21
 8000c1c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000c1e:	f7ff fc73 	bl	8000508 <HAL_GetTick>
 8000c22:	0003      	movs	r3, r0
 8000c24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1dba      	adds	r2, r7, #6
 8000c2a:	2154      	movs	r1, #84	@ 0x54
 8000c2c:	8812      	ldrh	r2, [r2, #0]
 8000c2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	1dba      	adds	r2, r7, #6
 8000c34:	2156      	movs	r1, #86	@ 0x56
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d108      	bne.n	8000c58 <HAL_UART_Transmit+0x98>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d104      	bne.n	8000c58 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	e003      	b.n	8000c60 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000c60:	e030      	b.n	8000cc4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	f000 fbf8 	bl	8001464 <UART_WaitOnFlagUntilTimeout>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2288      	movs	r2, #136	@ 0x88
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e03d      	b.n	8000d00 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10b      	bne.n	8000ca2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	05d2      	lsls	r2, r2, #23
 8000c96:	0dd2      	lsrs	r2, r2, #23
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	e007      	b.n	8000cb2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2256      	movs	r2, #86	@ 0x56
 8000cb6:	5a9b      	ldrh	r3, [r3, r2]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2256      	movs	r2, #86	@ 0x56
 8000cc2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2256      	movs	r2, #86	@ 0x56
 8000cc8:	5a9b      	ldrh	r3, [r3, r2]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1c8      	bne.n	8000c62 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	0013      	movs	r3, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2140      	movs	r1, #64	@ 0x40
 8000cde:	f000 fbc1 	bl	8001464 <UART_WaitOnFlagUntilTimeout>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2288      	movs	r2, #136	@ 0x88
 8000cea:	2120      	movs	r1, #32
 8000cec:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e006      	b.n	8000d00 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2288      	movs	r2, #136	@ 0x88
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8000cfe:	2302      	movs	r3, #2
  }
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b008      	add	sp, #32
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	228c      	movs	r2, #140	@ 0x8c
 8000d1c:	589b      	ldr	r3, [r3, r2]
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d000      	beq.n	8000d24 <HAL_UART_Receive+0x1c>
 8000d22:	e0d0      	b.n	8000ec6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_UART_Receive+0x2a>
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0c8      	b.n	8000ec8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	015b      	lsls	r3, r3, #5
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d109      	bne.n	8000d56 <HAL_UART_Receive+0x4e>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d105      	bne.n	8000d56 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0b8      	b.n	8000ec8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2290      	movs	r2, #144	@ 0x90
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	228c      	movs	r2, #140	@ 0x8c
 8000d62:	2122      	movs	r1, #34	@ 0x22
 8000d64:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000d6c:	f7ff fbcc 	bl	8000508 <HAL_GetTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1dba      	adds	r2, r7, #6
 8000d78:	215c      	movs	r1, #92	@ 0x5c
 8000d7a:	8812      	ldrh	r2, [r2, #0]
 8000d7c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1dba      	adds	r2, r7, #6
 8000d82:	215e      	movs	r1, #94	@ 0x5e
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d10d      	bne.n	8000db0 <HAL_UART_Receive+0xa8>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <HAL_UART_Receive+0x9e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2260      	movs	r2, #96	@ 0x60
 8000da0:	494b      	ldr	r1, [pc, #300]	@ (8000ed0 <HAL_UART_Receive+0x1c8>)
 8000da2:	5299      	strh	r1, [r3, r2]
 8000da4:	e02e      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2260      	movs	r2, #96	@ 0x60
 8000daa:	21ff      	movs	r1, #255	@ 0xff
 8000dac:	5299      	strh	r1, [r3, r2]
 8000dae:	e029      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10d      	bne.n	8000dd4 <HAL_UART_Receive+0xcc>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <HAL_UART_Receive+0xc2>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2260      	movs	r2, #96	@ 0x60
 8000dc4:	21ff      	movs	r1, #255	@ 0xff
 8000dc6:	5299      	strh	r1, [r3, r2]
 8000dc8:	e01c      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2260      	movs	r2, #96	@ 0x60
 8000dce:	217f      	movs	r1, #127	@ 0x7f
 8000dd0:	5299      	strh	r1, [r3, r2]
 8000dd2:	e017      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	055b      	lsls	r3, r3, #21
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d10d      	bne.n	8000dfc <HAL_UART_Receive+0xf4>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d104      	bne.n	8000df2 <HAL_UART_Receive+0xea>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2260      	movs	r2, #96	@ 0x60
 8000dec:	217f      	movs	r1, #127	@ 0x7f
 8000dee:	5299      	strh	r1, [r3, r2]
 8000df0:	e008      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2260      	movs	r2, #96	@ 0x60
 8000df6:	213f      	movs	r1, #63	@ 0x3f
 8000df8:	5299      	strh	r1, [r3, r2]
 8000dfa:	e003      	b.n	8000e04 <HAL_UART_Receive+0xfc>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2260      	movs	r2, #96	@ 0x60
 8000e00:	2100      	movs	r1, #0
 8000e02:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8000e04:	2312      	movs	r3, #18
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	2160      	movs	r1, #96	@ 0x60
 8000e0c:	5a52      	ldrh	r2, [r2, r1]
 8000e0e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d108      	bne.n	8000e2e <HAL_UART_Receive+0x126>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	e003      	b.n	8000e36 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8000e36:	e03a      	b.n	8000eae <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	0013      	movs	r3, r2
 8000e42:	2200      	movs	r2, #0
 8000e44:	2120      	movs	r1, #32
 8000e46:	f000 fb0d 	bl	8001464 <UART_WaitOnFlagUntilTimeout>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	228c      	movs	r2, #140	@ 0x8c
 8000e52:	2120      	movs	r1, #32
 8000e54:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e036      	b.n	8000ec8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10e      	bne.n	8000e7e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	2212      	movs	r2, #18
 8000e6a:	18ba      	adds	r2, r7, r2
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	3302      	adds	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	e00e      	b.n	8000e9c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2212      	movs	r2, #18
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	225e      	movs	r2, #94	@ 0x5e
 8000ea0:	5a9b      	ldrh	r3, [r3, r2]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	225e      	movs	r2, #94	@ 0x5e
 8000eac:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	225e      	movs	r2, #94	@ 0x5e
 8000eb2:	5a9b      	ldrh	r3, [r3, r2]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1be      	bne.n	8000e38 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	228c      	movs	r2, #140	@ 0x8c
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8000ec6:	2302      	movs	r3, #2
  }
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b008      	add	sp, #32
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	000001ff 	.word	0x000001ff

08000ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000edc:	231a      	movs	r3, #26
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4aa1      	ldr	r2, [pc, #644]	@ (8001188 <UART_SetConfig+0x2b4>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a9c      	ldr	r2, [pc, #624]	@ (800118c <UART_SetConfig+0x2b8>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	4a93      	ldr	r2, [pc, #588]	@ (8001190 <UART_SetConfig+0x2bc>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	220f      	movs	r2, #15
 8000f58:	4393      	bics	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a89      	ldr	r2, [pc, #548]	@ (8001194 <UART_SetConfig+0x2c0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d127      	bne.n	8000fc2 <UART_SetConfig+0xee>
 8000f72:	4b89      	ldr	r3, [pc, #548]	@ (8001198 <UART_SetConfig+0x2c4>)
 8000f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f76:	2203      	movs	r2, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <UART_SetConfig+0xda>
 8000f7e:	d81b      	bhi.n	8000fb8 <UART_SetConfig+0xe4>
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d00a      	beq.n	8000f9a <UART_SetConfig+0xc6>
 8000f84:	d818      	bhi.n	8000fb8 <UART_SetConfig+0xe4>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <UART_SetConfig+0xbc>
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d00a      	beq.n	8000fa4 <UART_SetConfig+0xd0>
 8000f8e:	e013      	b.n	8000fb8 <UART_SetConfig+0xe4>
 8000f90:	231b      	movs	r3, #27
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e021      	b.n	8000fde <UART_SetConfig+0x10a>
 8000f9a:	231b      	movs	r3, #27
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e01c      	b.n	8000fde <UART_SetConfig+0x10a>
 8000fa4:	231b      	movs	r3, #27
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2204      	movs	r2, #4
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e017      	b.n	8000fde <UART_SetConfig+0x10a>
 8000fae:	231b      	movs	r3, #27
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e012      	b.n	8000fde <UART_SetConfig+0x10a>
 8000fb8:	231b      	movs	r3, #27
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e00d      	b.n	8000fde <UART_SetConfig+0x10a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a75      	ldr	r2, [pc, #468]	@ (800119c <UART_SetConfig+0x2c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d104      	bne.n	8000fd6 <UART_SetConfig+0x102>
 8000fcc:	231b      	movs	r3, #27
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e003      	b.n	8000fde <UART_SetConfig+0x10a>
 8000fd6:	231b      	movs	r3, #27
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2210      	movs	r2, #16
 8000fdc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d000      	beq.n	8000fec <UART_SetConfig+0x118>
 8000fea:	e065      	b.n	80010b8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8000fec:	231b      	movs	r3, #27
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d015      	beq.n	8001022 <UART_SetConfig+0x14e>
 8000ff6:	dc18      	bgt.n	800102a <UART_SetConfig+0x156>
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d00d      	beq.n	8001018 <UART_SetConfig+0x144>
 8000ffc:	dc15      	bgt.n	800102a <UART_SetConfig+0x156>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <UART_SetConfig+0x134>
 8001002:	2b02      	cmp	r3, #2
 8001004:	d005      	beq.n	8001012 <UART_SetConfig+0x13e>
 8001006:	e010      	b.n	800102a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001008:	f7ff fd6e 	bl	8000ae8 <HAL_RCC_GetPCLK1Freq>
 800100c:	0003      	movs	r3, r0
 800100e:	617b      	str	r3, [r7, #20]
        break;
 8001010:	e012      	b.n	8001038 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001012:	4b63      	ldr	r3, [pc, #396]	@ (80011a0 <UART_SetConfig+0x2cc>)
 8001014:	617b      	str	r3, [r7, #20]
        break;
 8001016:	e00f      	b.n	8001038 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001018:	f7ff fcda 	bl	80009d0 <HAL_RCC_GetSysClockFreq>
 800101c:	0003      	movs	r3, r0
 800101e:	617b      	str	r3, [r7, #20]
        break;
 8001020:	e00a      	b.n	8001038 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	617b      	str	r3, [r7, #20]
        break;
 8001028:	e006      	b.n	8001038 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800102e:	231a      	movs	r3, #26
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
        break;
 8001036:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <UART_SetConfig+0x16c>
 800103e:	e08d      	b.n	800115c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001044:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <UART_SetConfig+0x2d0>)
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	5ad3      	ldrh	r3, [r2, r3]
 800104a:	0019      	movs	r1, r3
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff f857 	bl	8000100 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	005a      	lsls	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	18d2      	adds	r2, r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	0019      	movs	r1, r3
 8001064:	0010      	movs	r0, r2
 8001066:	f7ff f84b 	bl	8000100 <__udivsi3>
 800106a:	0003      	movs	r3, r0
 800106c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d91c      	bls.n	80010ae <UART_SetConfig+0x1da>
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	025b      	lsls	r3, r3, #9
 800107a:	429a      	cmp	r2, r3
 800107c:	d217      	bcs.n	80010ae <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	b29a      	uxth	r2, r3
 8001082:	200e      	movs	r0, #14
 8001084:	183b      	adds	r3, r7, r0
 8001086:	210f      	movs	r1, #15
 8001088:	438a      	bics	r2, r1
 800108a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	085b      	lsrs	r3, r3, #1
 8001090:	b29b      	uxth	r3, r3
 8001092:	2207      	movs	r2, #7
 8001094:	4013      	ands	r3, r2
 8001096:	b299      	uxth	r1, r3
 8001098:	183b      	adds	r3, r7, r0
 800109a:	183a      	adds	r2, r7, r0
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	183a      	adds	r2, r7, r0
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	e056      	b.n	800115c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80010ae:	231a      	movs	r3, #26
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e051      	b.n	800115c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80010b8:	231b      	movs	r3, #27
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d015      	beq.n	80010ee <UART_SetConfig+0x21a>
 80010c2:	dc18      	bgt.n	80010f6 <UART_SetConfig+0x222>
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d00d      	beq.n	80010e4 <UART_SetConfig+0x210>
 80010c8:	dc15      	bgt.n	80010f6 <UART_SetConfig+0x222>
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <UART_SetConfig+0x200>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d005      	beq.n	80010de <UART_SetConfig+0x20a>
 80010d2:	e010      	b.n	80010f6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80010d4:	f7ff fd08 	bl	8000ae8 <HAL_RCC_GetPCLK1Freq>
 80010d8:	0003      	movs	r3, r0
 80010da:	617b      	str	r3, [r7, #20]
        break;
 80010dc:	e012      	b.n	8001104 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80010de:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <UART_SetConfig+0x2cc>)
 80010e0:	617b      	str	r3, [r7, #20]
        break;
 80010e2:	e00f      	b.n	8001104 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80010e4:	f7ff fc74 	bl	80009d0 <HAL_RCC_GetSysClockFreq>
 80010e8:	0003      	movs	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]
        break;
 80010ec:	e00a      	b.n	8001104 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	617b      	str	r3, [r7, #20]
        break;
 80010f4:	e006      	b.n	8001104 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80010fa:	231a      	movs	r3, #26
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
        break;
 8001102:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d028      	beq.n	800115c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <UART_SetConfig+0x2d0>)
 8001110:	0052      	lsls	r2, r2, #1
 8001112:	5ad3      	ldrh	r3, [r2, r3]
 8001114:	0019      	movs	r1, r3
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7fe fff2 	bl	8000100 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	001a      	movs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	085b      	lsrs	r3, r3, #1
 8001126:	18d2      	adds	r2, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f7fe ffe6 	bl	8000100 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	d90a      	bls.n	8001154 <UART_SetConfig+0x280>
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	429a      	cmp	r2, r3
 8001146:	d205      	bcs.n	8001154 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	e003      	b.n	800115c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001154:	231a      	movs	r3, #26
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	226a      	movs	r2, #106	@ 0x6a
 8001160:	2101      	movs	r1, #1
 8001162:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2268      	movs	r2, #104	@ 0x68
 8001168:	2101      	movs	r1, #1
 800116a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001178:	231a      	movs	r3, #26
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b008      	add	sp, #32
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	cfff69f3 	.word	0xcfff69f3
 800118c:	ffffcfff 	.word	0xffffcfff
 8001190:	11fff4ff 	.word	0x11fff4ff
 8001194:	40013800 	.word	0x40013800
 8001198:	40021000 	.word	0x40021000
 800119c:	40004400 	.word	0x40004400
 80011a0:	00f42400 	.word	0x00f42400
 80011a4:	08001690 	.word	0x08001690

080011a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b4:	2208      	movs	r2, #8
 80011b6:	4013      	ands	r3, r2
 80011b8:	d00b      	beq.n	80011d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <UART_AdvFeatureConfig+0x144>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	0019      	movs	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	2201      	movs	r2, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d00b      	beq.n	80011f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a43      	ldr	r2, [pc, #268]	@ (80012f0 <UART_AdvFeatureConfig+0x148>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d00b      	beq.n	8001216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a3b      	ldr	r2, [pc, #236]	@ (80012f4 <UART_AdvFeatureConfig+0x14c>)
 8001206:	4013      	ands	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
 800121e:	d00b      	beq.n	8001238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a34      	ldr	r2, [pc, #208]	@ (80012f8 <UART_AdvFeatureConfig+0x150>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d00b      	beq.n	800125a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <UART_AdvFeatureConfig+0x154>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125e:	2220      	movs	r2, #32
 8001260:	4013      	ands	r3, r2
 8001262:	d00b      	beq.n	800127c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <UART_AdvFeatureConfig+0x158>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	2240      	movs	r2, #64	@ 0x40
 8001282:	4013      	ands	r3, r2
 8001284:	d01d      	beq.n	80012c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <UART_AdvFeatureConfig+0x15c>)
 800128e:	4013      	ands	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	035b      	lsls	r3, r3, #13
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d10b      	bne.n	80012c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <UART_AdvFeatureConfig+0x160>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	4013      	ands	r3, r2
 80012ca:	d00b      	beq.n	80012e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <UART_AdvFeatureConfig+0x164>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
  }
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	ffff7fff 	.word	0xffff7fff
 80012f0:	fffdffff 	.word	0xfffdffff
 80012f4:	fffeffff 	.word	0xfffeffff
 80012f8:	fffbffff 	.word	0xfffbffff
 80012fc:	ffffefff 	.word	0xffffefff
 8001300:	ffffdfff 	.word	0xffffdfff
 8001304:	ffefffff 	.word	0xffefffff
 8001308:	ff9fffff 	.word	0xff9fffff
 800130c:	fff7ffff 	.word	0xfff7ffff

08001310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b092      	sub	sp, #72	@ 0x48
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2290      	movs	r2, #144	@ 0x90
 800131c:	2100      	movs	r1, #0
 800131e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001320:	f7ff f8f2 	bl	8000508 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	4013      	ands	r3, r2
 8001332:	2b08      	cmp	r3, #8
 8001334:	d12d      	bne.n	8001392 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	0391      	lsls	r1, r2, #14
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4a47      	ldr	r2, [pc, #284]	@ (800145c <UART_CheckIdleState+0x14c>)
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	f000 f88e 	bl	8001464 <UART_WaitOnFlagUntilTimeout>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d022      	beq.n	8001392 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800134c:	f3ef 8310 	mrs	r3, PRIMASK
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800135a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135c:	f383 8810 	msr	PRIMASK, r3
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	438a      	bics	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	f383 8810 	msr	PRIMASK, r3
}
 800137c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2288      	movs	r2, #136	@ 0x88
 8001382:	2120      	movs	r1, #32
 8001384:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2284      	movs	r2, #132	@ 0x84
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e060      	b.n	8001454 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2204      	movs	r2, #4
 800139a:	4013      	ands	r3, r2
 800139c:	2b04      	cmp	r3, #4
 800139e:	d146      	bne.n	800142e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	03d1      	lsls	r1, r2, #15
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4a2c      	ldr	r2, [pc, #176]	@ (800145c <UART_CheckIdleState+0x14c>)
 80013aa:	9200      	str	r2, [sp, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f000 f859 	bl	8001464 <UART_WaitOnFlagUntilTimeout>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d03b      	beq.n	800142e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013b6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80013bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c0:	2301      	movs	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f383 8810 	msr	PRIMASK, r3
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4922      	ldr	r1, [pc, #136]	@ (8001460 <UART_CheckIdleState+0x150>)
 80013d8:	400a      	ands	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f383 8810 	msr	PRIMASK, r3
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e8:	f3ef 8310 	mrs	r3, PRIMASK
 80013ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80013ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f383 8810 	msr	PRIMASK, r3
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f383 8810 	msr	PRIMASK, r3
}
 8001418:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	228c      	movs	r2, #140	@ 0x8c
 800141e:	2120      	movs	r1, #32
 8001420:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2284      	movs	r2, #132	@ 0x84
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e012      	b.n	8001454 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2288      	movs	r2, #136	@ 0x88
 8001432:	2120      	movs	r1, #32
 8001434:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	228c      	movs	r2, #140	@ 0x8c
 800143a:	2120      	movs	r1, #32
 800143c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2284      	movs	r2, #132	@ 0x84
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b010      	add	sp, #64	@ 0x40
 800145a:	bd80      	pop	{r7, pc}
 800145c:	01ffffff 	.word	0x01ffffff
 8001460:	fffffedf 	.word	0xfffffedf

08001464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001474:	e051      	b.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	3301      	adds	r3, #1
 800147a:	d04e      	beq.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147c:	f7ff f844 	bl	8000508 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	429a      	cmp	r2, r3
 800148a:	d302      	bcc.n	8001492 <UART_WaitOnFlagUntilTimeout+0x2e>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e051      	b.n	800153a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2204      	movs	r2, #4
 800149e:	4013      	ands	r3, r2
 80014a0:	d03b      	beq.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b80      	cmp	r3, #128	@ 0x80
 80014a6:	d038      	beq.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b40      	cmp	r3, #64	@ 0x40
 80014ac:	d035      	beq.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2208      	movs	r2, #8
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d111      	bne.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 f83c 	bl	8001544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2290      	movs	r2, #144	@ 0x90
 80014d0:	2108      	movs	r1, #8
 80014d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2284      	movs	r2, #132	@ 0x84
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e02c      	b.n	800153a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	401a      	ands	r2, r3
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d112      	bne.n	800151a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f81f 	bl	8001544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2290      	movs	r2, #144	@ 0x90
 800150a:	2120      	movs	r1, #32
 800150c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2284      	movs	r2, #132	@ 0x84
 8001512:	2100      	movs	r1, #0
 8001514:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e00f      	b.n	800153a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	4013      	ands	r3, r2
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	425a      	negs	r2, r3
 800152a:	4153      	adcs	r3, r2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	001a      	movs	r2, r3
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d09e      	beq.n	8001476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b004      	add	sp, #16
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	@ 0x38
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800154c:	f3ef 8310 	mrs	r3, PRIMASK
 8001550:	617b      	str	r3, [r7, #20]
  return(result);
 8001552:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f383 8810 	msr	PRIMASK, r3
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4926      	ldr	r1, [pc, #152]	@ (8001608 <UART_EndRxTransfer+0xc4>)
 800156e:	400a      	ands	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f383 8810 	msr	PRIMASK, r3
}
 800157c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800157e:	f3ef 8310 	mrs	r3, PRIMASK
 8001582:	623b      	str	r3, [r7, #32]
  return(result);
 8001584:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
 8001588:	2301      	movs	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	f383 8810 	msr	PRIMASK, r3
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	491b      	ldr	r1, [pc, #108]	@ (800160c <UART_EndRxTransfer+0xc8>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015aa:	f383 8810 	msr	PRIMASK, r3
}
 80015ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d118      	bne.n	80015ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015b8:	f3ef 8310 	mrs	r3, PRIMASK
 80015bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80015be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c2:	2301      	movs	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f383 8810 	msr	PRIMASK, r3
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2110      	movs	r1, #16
 80015da:	438a      	bics	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f383 8810 	msr	PRIMASK, r3
}
 80015e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	228c      	movs	r2, #140	@ 0x8c
 80015ee:	2120      	movs	r1, #32
 80015f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b00e      	add	sp, #56	@ 0x38
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	fffffedf 	.word	0xfffffedf
 800160c:	effffffe 	.word	0xeffffffe

08001610 <__libc_init_array>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	2600      	movs	r6, #0
 8001614:	4c0c      	ldr	r4, [pc, #48]	@ (8001648 <__libc_init_array+0x38>)
 8001616:	4d0d      	ldr	r5, [pc, #52]	@ (800164c <__libc_init_array+0x3c>)
 8001618:	1b64      	subs	r4, r4, r5
 800161a:	10a4      	asrs	r4, r4, #2
 800161c:	42a6      	cmp	r6, r4
 800161e:	d109      	bne.n	8001634 <__libc_init_array+0x24>
 8001620:	2600      	movs	r6, #0
 8001622:	f000 f819 	bl	8001658 <_init>
 8001626:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <__libc_init_array+0x40>)
 8001628:	4d0a      	ldr	r5, [pc, #40]	@ (8001654 <__libc_init_array+0x44>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	42a6      	cmp	r6, r4
 8001630:	d105      	bne.n	800163e <__libc_init_array+0x2e>
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	00b3      	lsls	r3, r6, #2
 8001636:	58eb      	ldr	r3, [r5, r3]
 8001638:	4798      	blx	r3
 800163a:	3601      	adds	r6, #1
 800163c:	e7ee      	b.n	800161c <__libc_init_array+0xc>
 800163e:	00b3      	lsls	r3, r6, #2
 8001640:	58eb      	ldr	r3, [r5, r3]
 8001642:	4798      	blx	r3
 8001644:	3601      	adds	r6, #1
 8001646:	e7f2      	b.n	800162e <__libc_init_array+0x1e>
 8001648:	080016a8 	.word	0x080016a8
 800164c:	080016a8 	.word	0x080016a8
 8001650:	080016ac 	.word	0x080016ac
 8001654:	080016a8 	.word	0x080016a8

08001658 <_init>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr

08001664 <_fini>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr
