
test_g030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000484  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  0800053c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  0800053c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000540  08000540  00001540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000544  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000550  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000550  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001603  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000766  00000000  00000000  00003637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00003da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b2  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001213f  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025f2  00000000  00000000  000162f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e6e  00000000  00000000  000188e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000077c  00000000  00000000  00092794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00092f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08000524 	.word	0x08000524

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08000524 	.word	0x08000524

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
#include "main.h"

void SystemClockConfig(void);

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_Init();
 800021c:	f000 f83a 	bl	8000294 <HAL_Init>
	SystemClockConfig();
 8000220:	f000 f804 	bl	800022c <SystemClockConfig>

	return 0;
 8000224:	2300      	movs	r3, #0
}
 8000226:	0018      	movs	r0, r3
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <SystemClockConfig>:

void SystemClockConfig(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0




}
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}

08000236 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	@ (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000244:	f7ff fff7 	bl	8000236 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	@ (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	@ (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 f935 	bl	80004dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000272:	f7ff ffd1 	bl	8000218 <main>

08000276 <LoopForever>:

LoopForever:
  b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000284:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 8000288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800028c:	20000028 	.word	0x20000028

08000290 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_IRQHandler>
	...

08000294 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a0:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <HAL_Init+0x3c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <HAL_Init+0x3c>)
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0049      	lsls	r1, r1, #1
 80002aa:	430a      	orrs	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002ae:	2003      	movs	r0, #3
 80002b0:	f000 f816 	bl	80002e0 <HAL_InitTick>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d003      	beq.n	80002c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e001      	b.n	80002c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80002c0:	f000 f808 	bl	80002d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
}
 80002c8:	0018      	movs	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b002      	add	sp, #8
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40022000 	.word	0x40022000

080002d4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002e8:	230f      	movs	r3, #15
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80002f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <HAL_InitTick+0x88>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d02b      	beq.n	8000350 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80002f8:	4b1c      	ldr	r3, [pc, #112]	@ (800036c <HAL_InitTick+0x8c>)
 80002fa:	681c      	ldr	r4, [r3, #0]
 80002fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <HAL_InitTick+0x88>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	0019      	movs	r1, r3
 8000302:	23fa      	movs	r3, #250	@ 0xfa
 8000304:	0098      	lsls	r0, r3, #2
 8000306:	f7ff fefb 	bl	8000100 <__udivsi3>
 800030a:	0003      	movs	r3, r0
 800030c:	0019      	movs	r1, r3
 800030e:	0020      	movs	r0, r4
 8000310:	f7ff fef6 	bl	8000100 <__udivsi3>
 8000314:	0003      	movs	r3, r0
 8000316:	0018      	movs	r0, r3
 8000318:	f000 f8d3 	bl	80004c2 <HAL_SYSTICK_Config>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d112      	bne.n	8000346 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d80a      	bhi.n	800033c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	2301      	movs	r3, #1
 800032a:	425b      	negs	r3, r3
 800032c:	2200      	movs	r2, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f000 f8b2 	bl	8000498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000334:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <HAL_InitTick+0x90>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	e00d      	b.n	8000358 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800033c:	230f      	movs	r3, #15
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
 8000344:	e008      	b.n	8000358 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000346:	230f      	movs	r3, #15
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e003      	b.n	8000358 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000350:	230f      	movs	r3, #15
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000358:	230f      	movs	r3, #15
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	781b      	ldrb	r3, [r3, #0]
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b005      	add	sp, #20
 8000364:	bd90      	pop	{r4, r7, pc}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000
 8000370:	20000004 	.word	0x20000004

08000374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	0002      	movs	r2, r0
 800037c:	6039      	str	r1, [r7, #0]
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b7f      	cmp	r3, #127	@ 0x7f
 8000388:	d828      	bhi.n	80003dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038a:	4a2f      	ldr	r2, [pc, #188]	@ (8000448 <__NVIC_SetPriority+0xd4>)
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b25b      	sxtb	r3, r3
 8000392:	089b      	lsrs	r3, r3, #2
 8000394:	33c0      	adds	r3, #192	@ 0xc0
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	589b      	ldr	r3, [r3, r2]
 800039a:	1dfa      	adds	r2, r7, #7
 800039c:	7812      	ldrb	r2, [r2, #0]
 800039e:	0011      	movs	r1, r2
 80003a0:	2203      	movs	r2, #3
 80003a2:	400a      	ands	r2, r1
 80003a4:	00d2      	lsls	r2, r2, #3
 80003a6:	21ff      	movs	r1, #255	@ 0xff
 80003a8:	4091      	lsls	r1, r2
 80003aa:	000a      	movs	r2, r1
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	401a      	ands	r2, r3
 80003b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	019b      	lsls	r3, r3, #6
 80003b6:	22ff      	movs	r2, #255	@ 0xff
 80003b8:	401a      	ands	r2, r3
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0018      	movs	r0, r3
 80003c0:	2303      	movs	r3, #3
 80003c2:	4003      	ands	r3, r0
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c8:	481f      	ldr	r0, [pc, #124]	@ (8000448 <__NVIC_SetPriority+0xd4>)
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	089b      	lsrs	r3, r3, #2
 80003d2:	430a      	orrs	r2, r1
 80003d4:	33c0      	adds	r3, #192	@ 0xc0
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003da:	e031      	b.n	8000440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003dc:	4a1b      	ldr	r2, [pc, #108]	@ (800044c <__NVIC_SetPriority+0xd8>)
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	0019      	movs	r1, r3
 80003e4:	230f      	movs	r3, #15
 80003e6:	400b      	ands	r3, r1
 80003e8:	3b08      	subs	r3, #8
 80003ea:	089b      	lsrs	r3, r3, #2
 80003ec:	3306      	adds	r3, #6
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	18d3      	adds	r3, r2, r3
 80003f2:	3304      	adds	r3, #4
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	1dfa      	adds	r2, r7, #7
 80003f8:	7812      	ldrb	r2, [r2, #0]
 80003fa:	0011      	movs	r1, r2
 80003fc:	2203      	movs	r2, #3
 80003fe:	400a      	ands	r2, r1
 8000400:	00d2      	lsls	r2, r2, #3
 8000402:	21ff      	movs	r1, #255	@ 0xff
 8000404:	4091      	lsls	r1, r2
 8000406:	000a      	movs	r2, r1
 8000408:	43d2      	mvns	r2, r2
 800040a:	401a      	ands	r2, r3
 800040c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	019b      	lsls	r3, r3, #6
 8000412:	22ff      	movs	r2, #255	@ 0xff
 8000414:	401a      	ands	r2, r3
 8000416:	1dfb      	adds	r3, r7, #7
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	2303      	movs	r3, #3
 800041e:	4003      	ands	r3, r0
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000424:	4809      	ldr	r0, [pc, #36]	@ (800044c <__NVIC_SetPriority+0xd8>)
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	001c      	movs	r4, r3
 800042c:	230f      	movs	r3, #15
 800042e:	4023      	ands	r3, r4
 8000430:	3b08      	subs	r3, #8
 8000432:	089b      	lsrs	r3, r3, #2
 8000434:	430a      	orrs	r2, r1
 8000436:	3306      	adds	r3, #6
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	18c3      	adds	r3, r0, r3
 800043c:	3304      	adds	r3, #4
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	46c0      	nop			@ (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b003      	add	sp, #12
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	e000e100 	.word	0xe000e100
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	2380      	movs	r3, #128	@ 0x80
 800045e:	045b      	lsls	r3, r3, #17
 8000460:	429a      	cmp	r2, r3
 8000462:	d301      	bcc.n	8000468 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000464:	2301      	movs	r3, #1
 8000466:	e010      	b.n	800048a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <SysTick_Config+0x44>)
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	3a01      	subs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000470:	2301      	movs	r3, #1
 8000472:	425b      	negs	r3, r3
 8000474:	2103      	movs	r1, #3
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff ff7c 	bl	8000374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <SysTick_Config+0x44>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <SysTick_Config+0x44>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	0018      	movs	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	210f      	movs	r1, #15
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	1c02      	adds	r2, r0, #0
 80004a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b25b      	sxtb	r3, r3
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f7ff ff5d 	bl	8000374 <__NVIC_SetPriority>
}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ffbf 	bl	8000450 <SysTick_Config>
 80004d2:	0003      	movs	r3, r0
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2600      	movs	r6, #0
 80004e0:	4c0c      	ldr	r4, [pc, #48]	@ (8000514 <__libc_init_array+0x38>)
 80004e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000518 <__libc_init_array+0x3c>)
 80004e4:	1b64      	subs	r4, r4, r5
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	42a6      	cmp	r6, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	2600      	movs	r6, #0
 80004ee:	f000 f819 	bl	8000524 <_init>
 80004f2:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <__libc_init_array+0x40>)
 80004f4:	4d0a      	ldr	r5, [pc, #40]	@ (8000520 <__libc_init_array+0x44>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	42a6      	cmp	r6, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	00b3      	lsls	r3, r6, #2
 8000502:	58eb      	ldr	r3, [r5, r3]
 8000504:	4798      	blx	r3
 8000506:	3601      	adds	r6, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	00b3      	lsls	r3, r6, #2
 800050c:	58eb      	ldr	r3, [r5, r3]
 800050e:	4798      	blx	r3
 8000510:	3601      	adds	r6, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	08000540 	.word	0x08000540
 8000520:	0800053c 	.word	0x0800053c

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr
