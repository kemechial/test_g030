
test_g030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001428  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080014e0  080014e0  000024e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001538  08001538  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  08001538  08001538  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001538  08001538  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001538  08001538  00002538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001540  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08001550  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001550  000030c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008243  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001273  00000000  00000000  0000b27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  0000c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a4  00000000  00000000  0000caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de2  00000000  00000000  0000cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085eb  00000000  00000000  00020d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e746  00000000  00000000  00029361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001448  00000000  00000000  000a7aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a8f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080014c8 	.word	0x080014c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	080014c8 	.word	0x080014c8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <SysTick_Handler>:

#include "stm32g0xx_hal.h"


void SysTick_Handler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800022c:	f000 f954 	bl	80004d8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000230:	f000 fa70 	bl	8000714 <HAL_SYSTICK_IRQHandler>


}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <main>:
void SystemClockConfig(void);
void UART1_Init(void);
void Error_handler(void);

int main(void)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	HAL_Init();
 8000242:	f000 f8df 	bl	8000404 <HAL_Init>
	SystemClockConfig();
 8000246:	f000 f823 	bl	8000290 <SystemClockConfig>
	UART1_Init();
 800024a:	f000 f827 	bl	800029c <UART1_Init>

	uint16_t str_size = strlen(user_data);
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <main+0x4c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	0018      	movs	r0, r3
 8000254:	f7ff ff54 	bl	8000100 <strlen>
 8000258:	0002      	movs	r2, r0
 800025a:	1dbb      	adds	r3, r7, #6
 800025c:	801a      	strh	r2, [r3, #0]
    while(1){
	if(HAL_UART_Transmit(&huart1, (uint8_t *) user_data, str_size, HAL_MAX_DELAY)!=HAL_OK){
 800025e:	4b0a      	ldr	r3, [pc, #40]	@ (8000288 <main+0x4c>)
 8000260:	6819      	ldr	r1, [r3, #0]
 8000262:	2301      	movs	r3, #1
 8000264:	425c      	negs	r4, r3
 8000266:	1dbb      	adds	r3, r7, #6
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4808      	ldr	r0, [pc, #32]	@ (800028c <main+0x50>)
 800026c:	0023      	movs	r3, r4
 800026e:	f000 fcc5 	bl	8000bfc <HAL_UART_Transmit>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d001      	beq.n	800027a <main+0x3e>
		Error_handler();
 8000276:	f000 f839 	bl	80002ec <Error_handler>
	}

	HAL_Delay(1000);
 800027a:	23fa      	movs	r3, #250	@ 0xfa
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	0018      	movs	r0, r3
 8000280:	f000 f946 	bl	8000510 <HAL_Delay>
	if(HAL_UART_Transmit(&huart1, (uint8_t *) user_data, str_size, HAL_MAX_DELAY)!=HAL_OK){
 8000284:	e7eb      	b.n	800025e <main+0x22>
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	20000000 	.word	0x20000000
 800028c:	2000002c 	.word	0x2000002c

08000290 <SystemClockConfig>:
   }
	return 0;
}

void SystemClockConfig(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0




}
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <UART1_Init>:

void UART1_Init()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80002a0:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <UART1_Init+0x48>)
 80002a2:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <UART1_Init+0x4c>)
 80002a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <UART1_Init+0x48>)
 80002a8:	22e1      	movs	r2, #225	@ 0xe1
 80002aa:	0252      	lsls	r2, r2, #9
 80002ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <UART1_Init+0x48>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <UART1_Init+0x48>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <UART1_Init+0x48>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <UART1_Init+0x48>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <UART1_Init+0x48>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]

	if(HAL_UART_Init(&huart1) != HAL_OK){
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <UART1_Init+0x48>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fc3e 	bl	8000b50 <HAL_UART_Init>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <UART1_Init+0x40>
		Error_handler();
 80002d8:	f000 f808 	bl	80002ec <Error_handler>
	}

}
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	2000002c 	.word	0x2000002c
 80002e8:	40013800 	.word	0x40013800

080002ec <Error_handler>:

void Error_handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

   while(1);
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	e7fd      	b.n	80002f0 <Error_handler+0x4>

080002f4 <HAL_MspInit>:
 *      Author: Lenovo
 */
#include "stm32g0xx_hal.h"

void HAL_MspInit(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//STM32G030 does not have priority grouping otherwise
	// there would be a HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) call here.

}
 80002f8:	46c0      	nop			@ (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b08b      	sub	sp, #44	@ 0x2c
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//Enable the clock for uart and GPIO pins
	__HAL_RCC_USART1_CLK_ENABLE();
 8000308:	4b25      	ldr	r3, [pc, #148]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 800030a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800030c:	4b24      	ldr	r3, [pc, #144]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 800030e:	2180      	movs	r1, #128	@ 0x80
 8000310:	01c9      	lsls	r1, r1, #7
 8000312:	430a      	orrs	r2, r1
 8000314:	641a      	str	r2, [r3, #64]	@ 0x40
 8000316:	4b22      	ldr	r3, [pc, #136]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 8000318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	01db      	lsls	r3, r3, #7
 800031e:	4013      	ands	r3, r2
 8000320:	613b      	str	r3, [r7, #16]
 8000322:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 8000326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000328:	4b1d      	ldr	r3, [pc, #116]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 800032a:	2101      	movs	r1, #1
 800032c:	430a      	orrs	r2, r1
 800032e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000330:	4b1b      	ldr	r3, [pc, #108]	@ (80003a0 <HAL_UART_MspInit+0xa0>)
 8000332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000334:	2201      	movs	r2, #1
 8000336:	4013      	ands	r3, r2
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]

	//Do the pin mux configurations
	gpio_uart.Pin = GPIO_PIN_9;
 800033c:	2114      	movs	r1, #20
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2280      	movs	r2, #128	@ 0x80
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	601a      	str	r2, [r3, #0]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000346:	000c      	movs	r4, r1
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
	gpio_uart.Pull = GPIO_PULLUP;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2201      	movs	r2, #1
 8000352:	609a      	str	r2, [r3, #8]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
	gpio_uart.Alternate = GPIO_AF1_USART1; //USART1 TX
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2201      	movs	r2, #1
 800035e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000360:	193a      	adds	r2, r7, r4
 8000362:	23a0      	movs	r3, #160	@ 0xa0
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	0011      	movs	r1, r2
 8000368:	0018      	movs	r0, r3
 800036a:	f000 f9df 	bl	800072c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10; //USART1 RX
 800036e:	0021      	movs	r1, r4
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2280      	movs	r2, #128	@ 0x80
 8000374:	00d2      	lsls	r2, r2, #3
 8000376:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000378:	187a      	adds	r2, r7, r1
 800037a:	23a0      	movs	r3, #160	@ 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	0011      	movs	r1, r2
 8000380:	0018      	movs	r0, r3
 8000382:	f000 f9d3 	bl	800072c <HAL_GPIO_Init>

	//Enable IRQ and set up the priority
	 HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000386:	201b      	movs	r0, #27
 8000388:	f000 f9a7 	bl	80006da <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	201b      	movs	r0, #27
 8000392:	f000 f98d 	bl	80006b0 <HAL_NVIC_SetPriority>

}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b00b      	add	sp, #44	@ 0x2c
 800039c:	bd90      	pop	{r4, r7, pc}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000

080003a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	46c0      	nop			@ (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	@ (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f7ff fff6 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	@ (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	@ (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	@ (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f001 f84f 	bl	8001480 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80003e2:	f7ff ff2b 	bl	800023c <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003f4:	08001540 	.word	0x08001540
  ldr r2, =_sbss
 80003f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003fc:	200000c4 	.word	0x200000c4

08000400 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_IRQHandler>
	...

08000404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000410:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <HAL_Init+0x3c>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <HAL_Init+0x3c>)
 8000416:	2180      	movs	r1, #128	@ 0x80
 8000418:	0049      	lsls	r1, r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800041e:	2003      	movs	r0, #3
 8000420:	f000 f810 	bl	8000444 <HAL_InitTick>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d003      	beq.n	8000430 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	e001      	b.n	8000434 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000430:	f7ff ff60 	bl	80002f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b002      	add	sp, #8
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40022000 	.word	0x40022000

08000444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800044c:	230f      	movs	r3, #15
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000454:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <HAL_InitTick+0x88>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d02b      	beq.n	80004b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800045c:	4b1c      	ldr	r3, [pc, #112]	@ (80004d0 <HAL_InitTick+0x8c>)
 800045e:	681c      	ldr	r4, [r3, #0]
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <HAL_InitTick+0x88>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	0019      	movs	r1, r3
 8000466:	23fa      	movs	r3, #250	@ 0xfa
 8000468:	0098      	lsls	r0, r3, #2
 800046a:	f7ff fe51 	bl	8000110 <__udivsi3>
 800046e:	0003      	movs	r3, r0
 8000470:	0019      	movs	r1, r3
 8000472:	0020      	movs	r0, r4
 8000474:	f7ff fe4c 	bl	8000110 <__udivsi3>
 8000478:	0003      	movs	r3, r0
 800047a:	0018      	movs	r0, r3
 800047c:	f000 f93d 	bl	80006fa <HAL_SYSTICK_Config>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d112      	bne.n	80004aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b03      	cmp	r3, #3
 8000488:	d80a      	bhi.n	80004a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	2200      	movs	r2, #0
 8000492:	0018      	movs	r0, r3
 8000494:	f000 f90c 	bl	80006b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <HAL_InitTick+0x90>)
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e00d      	b.n	80004bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80004a0:	230f      	movs	r3, #15
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e008      	b.n	80004bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e003      	b.n	80004bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80004bc:	230f      	movs	r3, #15
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	781b      	ldrb	r3, [r3, #0]
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b005      	add	sp, #20
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	20000004 	.word	0x20000004
 80004d4:	20000008 	.word	0x20000008

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	18d2      	adds	r2, r2, r3
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_IncTick+0x20>)
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	2000000c 	.word	0x2000000c
 80004f8:	200000c0 	.word	0x200000c0

080004fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	200000c0 	.word	0x200000c0

08000510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff fff0 	bl	80004fc <HAL_GetTick>
 800051c:	0003      	movs	r3, r0
 800051e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3301      	adds	r3, #1
 8000528:	d005      	beq.n	8000536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_Delay+0x44>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	001a      	movs	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	189b      	adds	r3, r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	f7ff ffe0 	bl	80004fc <HAL_GetTick>
 800053c:	0002      	movs	r2, r0
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d8f7      	bhi.n	8000538 <HAL_Delay+0x28>
  {
  }
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b004      	add	sp, #16
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	2000000c 	.word	0x2000000c

08000558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b7f      	cmp	r3, #127	@ 0x7f
 800056a:	d809      	bhi.n	8000580 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	001a      	movs	r2, r3
 8000572:	231f      	movs	r3, #31
 8000574:	401a      	ands	r2, r3
 8000576:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <__NVIC_EnableIRQ+0x30>)
 8000578:	2101      	movs	r1, #1
 800057a:	4091      	lsls	r1, r2
 800057c:	000a      	movs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}
 8000588:	e000e100 	.word	0xe000e100

0800058c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b7f      	cmp	r3, #127	@ 0x7f
 80005a0:	d828      	bhi.n	80005f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000660 <__NVIC_SetPriority+0xd4>)
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	33c0      	adds	r3, #192	@ 0xc0
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	589b      	ldr	r3, [r3, r2]
 80005b2:	1dfa      	adds	r2, r7, #7
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	0011      	movs	r1, r2
 80005b8:	2203      	movs	r2, #3
 80005ba:	400a      	ands	r2, r1
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	21ff      	movs	r1, #255	@ 0xff
 80005c0:	4091      	lsls	r1, r2
 80005c2:	000a      	movs	r2, r1
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	401a      	ands	r2, r3
 80005c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	019b      	lsls	r3, r3, #6
 80005ce:	22ff      	movs	r2, #255	@ 0xff
 80005d0:	401a      	ands	r2, r3
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	0018      	movs	r0, r3
 80005d8:	2303      	movs	r3, #3
 80005da:	4003      	ands	r3, r0
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e0:	481f      	ldr	r0, [pc, #124]	@ (8000660 <__NVIC_SetPriority+0xd4>)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	33c0      	adds	r3, #192	@ 0xc0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005f2:	e031      	b.n	8000658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <__NVIC_SetPriority+0xd8>)
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0019      	movs	r1, r3
 80005fc:	230f      	movs	r3, #15
 80005fe:	400b      	ands	r3, r1
 8000600:	3b08      	subs	r3, #8
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	3306      	adds	r3, #6
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	3304      	adds	r3, #4
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1dfa      	adds	r2, r7, #7
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	0011      	movs	r1, r2
 8000614:	2203      	movs	r2, #3
 8000616:	400a      	ands	r2, r1
 8000618:	00d2      	lsls	r2, r2, #3
 800061a:	21ff      	movs	r1, #255	@ 0xff
 800061c:	4091      	lsls	r1, r2
 800061e:	000a      	movs	r2, r1
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	019b      	lsls	r3, r3, #6
 800062a:	22ff      	movs	r2, #255	@ 0xff
 800062c:	401a      	ands	r2, r3
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	2303      	movs	r3, #3
 8000636:	4003      	ands	r3, r0
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <__NVIC_SetPriority+0xd8>)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	001c      	movs	r4, r3
 8000644:	230f      	movs	r3, #15
 8000646:	4023      	ands	r3, r4
 8000648:	3b08      	subs	r3, #8
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	430a      	orrs	r2, r1
 800064e:	3306      	adds	r3, #6
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18c3      	adds	r3, r0, r3
 8000654:	3304      	adds	r3, #4
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b003      	add	sp, #12
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	2380      	movs	r3, #128	@ 0x80
 8000676:	045b      	lsls	r3, r3, #17
 8000678:	429a      	cmp	r2, r3
 800067a:	d301      	bcc.n	8000680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800067c:	2301      	movs	r3, #1
 800067e:	e010      	b.n	80006a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <SysTick_Config+0x44>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	3a01      	subs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	2103      	movs	r1, #3
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff ff7c 	bl	800058c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <SysTick_Config+0x44>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <SysTick_Config+0x44>)
 800069c:	2207      	movs	r2, #7
 800069e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	0018      	movs	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	e000e010 	.word	0xe000e010

080006b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
 80006ba:	210f      	movs	r1, #15
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	1c02      	adds	r2, r0, #0
 80006c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff ff5d 	bl	800058c <__NVIC_SetPriority>
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b004      	add	sp, #16
 80006d8:	bd80      	pop	{r7, pc}

080006da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	0002      	movs	r2, r0
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ff33 	bl	8000558 <__NVIC_EnableIRQ>
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff ffaf 	bl	8000668 <SysTick_Config>
 800070a:	0003      	movs	r3, r0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000718:	f000 f803 	bl	8000722 <HAL_SYSTICK_Callback>
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800073a:	e147      	b.n	80009cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4091      	lsls	r1, r2
 8000746:	000a      	movs	r2, r1
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d100      	bne.n	8000754 <HAL_GPIO_Init+0x28>
 8000752:	e138      	b.n	80009c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2203      	movs	r2, #3
 800075a:	4013      	ands	r3, r2
 800075c:	2b01      	cmp	r3, #1
 800075e:	d005      	beq.n	800076c <HAL_GPIO_Init+0x40>
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2203      	movs	r2, #3
 8000766:	4013      	ands	r3, r2
 8000768:	2b02      	cmp	r3, #2
 800076a:	d130      	bne.n	80007ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	409a      	lsls	r2, r3
 800077a:	0013      	movs	r3, r2
 800077c:	43da      	mvns	r2, r3
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	409a      	lsls	r2, r3
 800078e:	0013      	movs	r3, r2
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007a2:	2201      	movs	r2, #1
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
 80007a8:	0013      	movs	r3, r2
 80007aa:	43da      	mvns	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	091b      	lsrs	r3, r3, #4
 80007b8:	2201      	movs	r2, #1
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d017      	beq.n	800080a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2203      	movs	r2, #3
 80007e6:	409a      	lsls	r2, r3
 80007e8:	0013      	movs	r3, r2
 80007ea:	43da      	mvns	r2, r3
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	409a      	lsls	r2, r3
 80007fc:	0013      	movs	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2203      	movs	r2, #3
 8000810:	4013      	ands	r3, r2
 8000812:	2b02      	cmp	r3, #2
 8000814:	d123      	bne.n	800085e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	08da      	lsrs	r2, r3, #3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3208      	adds	r2, #8
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	58d3      	ldr	r3, [r2, r3]
 8000822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2207      	movs	r2, #7
 8000828:	4013      	ands	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	220f      	movs	r2, #15
 800082e:	409a      	lsls	r2, r3
 8000830:	0013      	movs	r3, r2
 8000832:	43da      	mvns	r2, r3
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	4013      	ands	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	691a      	ldr	r2, [r3, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2107      	movs	r1, #7
 8000842:	400b      	ands	r3, r1
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	08da      	lsrs	r2, r3, #3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3208      	adds	r2, #8
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	6939      	ldr	r1, [r7, #16]
 800085c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	409a      	lsls	r2, r3
 800086c:	0013      	movs	r3, r2
 800086e:	43da      	mvns	r2, r3
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2203      	movs	r2, #3
 800087c:	401a      	ands	r2, r3
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	409a      	lsls	r2, r3
 8000884:	0013      	movs	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	23c0      	movs	r3, #192	@ 0xc0
 8000898:	029b      	lsls	r3, r3, #10
 800089a:	4013      	ands	r3, r2
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x174>
 800089e:	e092      	b.n	80009c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80008a0:	4a50      	ldr	r2, [pc, #320]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	3318      	adds	r3, #24
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	589b      	ldr	r3, [r3, r2]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2203      	movs	r2, #3
 80008b2:	4013      	ands	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	220f      	movs	r2, #15
 80008b8:	409a      	lsls	r2, r3
 80008ba:	0013      	movs	r3, r2
 80008bc:	43da      	mvns	r2, r3
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	23a0      	movs	r3, #160	@ 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0x1ca>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a45      	ldr	r2, [pc, #276]	@ (80009e8 <HAL_GPIO_Init+0x2bc>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d00d      	beq.n	80008f2 <HAL_GPIO_Init+0x1c6>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a44      	ldr	r2, [pc, #272]	@ (80009ec <HAL_GPIO_Init+0x2c0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0x1c2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a43      	ldr	r2, [pc, #268]	@ (80009f0 <HAL_GPIO_Init+0x2c4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_GPIO_Init+0x1be>
 80008e6:	2303      	movs	r3, #3
 80008e8:	e006      	b.n	80008f8 <HAL_GPIO_Init+0x1cc>
 80008ea:	2305      	movs	r3, #5
 80008ec:	e004      	b.n	80008f8 <HAL_GPIO_Init+0x1cc>
 80008ee:	2302      	movs	r3, #2
 80008f0:	e002      	b.n	80008f8 <HAL_GPIO_Init+0x1cc>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <HAL_GPIO_Init+0x1cc>
 80008f6:	2300      	movs	r3, #0
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	2103      	movs	r1, #3
 80008fc:	400a      	ands	r2, r1
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	4093      	lsls	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000908:	4936      	ldr	r1, [pc, #216]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	3318      	adds	r3, #24
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000916:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	43da      	mvns	r2, r3
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	2380      	movs	r3, #128	@ 0x80
 800092c:	035b      	lsls	r3, r3, #13
 800092e:	4013      	ands	r3, r2
 8000930:	d003      	beq.n	800093a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800093a:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	43da      	mvns	r2, r3
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	039b      	lsls	r3, r3, #14
 8000958:	4013      	ands	r3, r2
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 800096c:	2384      	movs	r3, #132	@ 0x84
 800096e:	58d3      	ldr	r3, [r2, r3]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	43da      	mvns	r2, r3
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	029b      	lsls	r3, r3, #10
 8000984:	4013      	ands	r3, r2
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000990:	4914      	ldr	r1, [pc, #80]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 8000992:	2284      	movs	r2, #132	@ 0x84
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000998:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 800099a:	2380      	movs	r3, #128	@ 0x80
 800099c:	58d3      	ldr	r3, [r2, r3]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	43da      	mvns	r2, r3
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	025b      	lsls	r3, r3, #9
 80009b2:	4013      	ands	r3, r2
 80009b4:	d003      	beq.n	80009be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009be:	4909      	ldr	r1, [pc, #36]	@ (80009e4 <HAL_GPIO_Init+0x2b8>)
 80009c0:	2280      	movs	r2, #128	@ 0x80
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	40da      	lsrs	r2, r3
 80009d4:	1e13      	subs	r3, r2, #0
 80009d6:	d000      	beq.n	80009da <HAL_GPIO_Init+0x2ae>
 80009d8:	e6b0      	b.n	800073c <HAL_GPIO_Init+0x10>
  }
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b006      	add	sp, #24
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021800 	.word	0x40021800
 80009e8:	50000400 	.word	0x50000400
 80009ec:	50000800 	.word	0x50000800
 80009f0:	50000c00 	.word	0x50000c00

080009f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <LL_RCC_GetAPB1Prescaler+0x14>)
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	23e0      	movs	r3, #224	@ 0xe0
 80009fe:	01db      	lsls	r3, r3, #7
 8000a00:	4013      	ands	r3, r2
}
 8000a02:	0018      	movs	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a12:	4b3c      	ldr	r3, [pc, #240]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2238      	movs	r2, #56	@ 0x38
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d10f      	bne.n	8000a3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000a1c:	4b39      	ldr	r3, [pc, #228]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	0adb      	lsrs	r3, r3, #11
 8000a22:	2207      	movs	r2, #7
 8000a24:	4013      	ands	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000a32:	f7ff fb6d 	bl	8000110 <__udivsi3>
 8000a36:	0003      	movs	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e05d      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a3c:	4b31      	ldr	r3, [pc, #196]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2238      	movs	r2, #56	@ 0x38
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d102      	bne.n	8000a4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000a48:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	e054      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2238      	movs	r2, #56	@ 0x38
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b10      	cmp	r3, #16
 8000a58:	d138      	bne.n	8000acc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	091b      	lsrs	r3, r3, #4
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d10d      	bne.n	8000a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	4824      	ldr	r0, [pc, #144]	@ (8000b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8000a7c:	f7ff fb48 	bl	8000110 <__udivsi3>
 8000a80:	0003      	movs	r3, r0
 8000a82:	0019      	movs	r1, r3
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	227f      	movs	r2, #127	@ 0x7f
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	434b      	muls	r3, r1
 8000a90:	617b      	str	r3, [r7, #20]
        break;
 8000a92:	e00d      	b.n	8000ab0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	481c      	ldr	r0, [pc, #112]	@ (8000b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000a98:	f7ff fb3a 	bl	8000110 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	227f      	movs	r2, #127	@ 0x7f
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	434b      	muls	r3, r1
 8000aac:	617b      	str	r3, [r7, #20]
        break;
 8000aae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0f5b      	lsrs	r3, r3, #29
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	4013      	ands	r3, r2
 8000aba:	3301      	adds	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6978      	ldr	r0, [r7, #20]
 8000ac2:	f7ff fb25 	bl	8000110 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e015      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2238      	movs	r2, #56	@ 0x38
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b20      	cmp	r3, #32
 8000ad6:	d103      	bne.n	8000ae0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8000ad8:	2380      	movs	r3, #128	@ 0x80
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	e00b      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2238      	movs	r2, #56	@ 0x38
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b18      	cmp	r3, #24
 8000aea:	d103      	bne.n	8000af4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8000aec:	23fa      	movs	r3, #250	@ 0xfa
 8000aee:	01db      	lsls	r3, r3, #7
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	e001      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000af8:	693b      	ldr	r3, [r7, #16]
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b006      	add	sp, #24
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000
 8000b08:	00f42400 	.word	0x00f42400
 8000b0c:	007a1200 	.word	0x007a1200

08000b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b14:	4b02      	ldr	r3, [pc, #8]	@ (8000b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8000b28:	f7ff fff2 	bl	8000b10 <HAL_RCC_GetHCLKFreq>
 8000b2c:	0004      	movs	r4, r0
 8000b2e:	f7ff ff61 	bl	80009f4 <LL_RCC_GetAPB1Prescaler>
 8000b32:	0003      	movs	r3, r0
 8000b34:	0b1a      	lsrs	r2, r3, #12
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	58d3      	ldr	r3, [r2, r3]
 8000b3c:	221f      	movs	r2, #31
 8000b3e:	4013      	ands	r3, r2
 8000b40:	40dc      	lsrs	r4, r3
 8000b42:	0023      	movs	r3, r4
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bdb0      	pop	{r4, r5, r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	08001500 	.word	0x08001500

08000b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e046      	b.n	8000bf0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2288      	movs	r2, #136	@ 0x88
 8000b66:	589b      	ldr	r3, [r3, r2]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d107      	bne.n	8000b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2284      	movs	r2, #132	@ 0x84
 8000b70:	2100      	movs	r1, #0
 8000b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fbc2 	bl	8000300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2288      	movs	r2, #136	@ 0x88
 8000b80:	2124      	movs	r1, #36	@ 0x24
 8000b82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	438a      	bics	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fa3a 	bl	8001018 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f8cc 	bl	8000d44 <UART_SetConfig>
 8000bac:	0003      	movs	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e01c      	b.n	8000bf0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <HAL_UART_Init+0xa8>)
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	212a      	movs	r1, #42	@ 0x2a
 8000bd2:	438a      	bics	r2, r1
 8000bd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fac9 	bl	8001180 <UART_CheckIdleState>
 8000bee:	0003      	movs	r3, r0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	ffffb7ff 	.word	0xffffb7ff

08000bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2288      	movs	r2, #136	@ 0x88
 8000c10:	589b      	ldr	r3, [r3, r2]
 8000c12:	2b20      	cmp	r3, #32
 8000c14:	d000      	beq.n	8000c18 <HAL_UART_Transmit+0x1c>
 8000c16:	e090      	b.n	8000d3a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_UART_Transmit+0x2a>
 8000c1e:	1dbb      	adds	r3, r7, #6
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e088      	b.n	8000d3c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d109      	bne.n	8000c4a <HAL_UART_Transmit+0x4e>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d105      	bne.n	8000c4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e078      	b.n	8000d3c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2290      	movs	r2, #144	@ 0x90
 8000c4e:	2100      	movs	r1, #0
 8000c50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2288      	movs	r2, #136	@ 0x88
 8000c56:	2121      	movs	r1, #33	@ 0x21
 8000c58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000c5a:	f7ff fc4f 	bl	80004fc <HAL_GetTick>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1dba      	adds	r2, r7, #6
 8000c66:	2154      	movs	r1, #84	@ 0x54
 8000c68:	8812      	ldrh	r2, [r2, #0]
 8000c6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	1dba      	adds	r2, r7, #6
 8000c70:	2156      	movs	r1, #86	@ 0x56
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	2380      	movs	r3, #128	@ 0x80
 8000c7c:	015b      	lsls	r3, r3, #5
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d108      	bne.n	8000c94 <HAL_UART_Transmit+0x98>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d104      	bne.n	8000c94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	e003      	b.n	8000c9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000c9c:	e030      	b.n	8000d00 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	f000 fb12 	bl	80012d4 <UART_WaitOnFlagUntilTimeout>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d005      	beq.n	8000cc0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2288      	movs	r2, #136	@ 0x88
 8000cb8:	2120      	movs	r1, #32
 8000cba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e03d      	b.n	8000d3c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10b      	bne.n	8000cde <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	001a      	movs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	05d2      	lsls	r2, r2, #23
 8000cd2:	0dd2      	lsrs	r2, r2, #23
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3302      	adds	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	e007      	b.n	8000cee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2256      	movs	r2, #86	@ 0x56
 8000cf2:	5a9b      	ldrh	r3, [r3, r2]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b299      	uxth	r1, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2256      	movs	r2, #86	@ 0x56
 8000cfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2256      	movs	r2, #86	@ 0x56
 8000d04:	5a9b      	ldrh	r3, [r3, r2]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1c8      	bne.n	8000c9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	0013      	movs	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	@ 0x40
 8000d1a:	f000 fadb 	bl	80012d4 <UART_WaitOnFlagUntilTimeout>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2288      	movs	r2, #136	@ 0x88
 8000d26:	2120      	movs	r1, #32
 8000d28:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e006      	b.n	8000d3c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2288      	movs	r2, #136	@ 0x88
 8000d32:	2120      	movs	r1, #32
 8000d34:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8000d3a:	2302      	movs	r3, #2
  }
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b008      	add	sp, #32
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d4c:	231a      	movs	r3, #26
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4aa1      	ldr	r2, [pc, #644]	@ (8000ff8 <UART_SetConfig+0x2b4>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4a9c      	ldr	r2, [pc, #624]	@ (8000ffc <UART_SetConfig+0x2b8>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4a93      	ldr	r2, [pc, #588]	@ (8001000 <UART_SetConfig+0x2bc>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	0019      	movs	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	4393      	bics	r3, r2
 8000dca:	0019      	movs	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a89      	ldr	r2, [pc, #548]	@ (8001004 <UART_SetConfig+0x2c0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d127      	bne.n	8000e32 <UART_SetConfig+0xee>
 8000de2:	4b89      	ldr	r3, [pc, #548]	@ (8001008 <UART_SetConfig+0x2c4>)
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <UART_SetConfig+0xda>
 8000dee:	d81b      	bhi.n	8000e28 <UART_SetConfig+0xe4>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d00a      	beq.n	8000e0a <UART_SetConfig+0xc6>
 8000df4:	d818      	bhi.n	8000e28 <UART_SetConfig+0xe4>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <UART_SetConfig+0xbc>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00a      	beq.n	8000e14 <UART_SetConfig+0xd0>
 8000dfe:	e013      	b.n	8000e28 <UART_SetConfig+0xe4>
 8000e00:	231b      	movs	r3, #27
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e021      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e0a:	231b      	movs	r3, #27
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2202      	movs	r2, #2
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e01c      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e14:	231b      	movs	r3, #27
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2204      	movs	r2, #4
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e017      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e1e:	231b      	movs	r3, #27
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2208      	movs	r2, #8
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e012      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e28:	231b      	movs	r3, #27
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e00d      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a75      	ldr	r2, [pc, #468]	@ (800100c <UART_SetConfig+0x2c8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d104      	bne.n	8000e46 <UART_SetConfig+0x102>
 8000e3c:	231b      	movs	r3, #27
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e003      	b.n	8000e4e <UART_SetConfig+0x10a>
 8000e46:	231b      	movs	r3, #27
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69da      	ldr	r2, [r3, #28]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d000      	beq.n	8000e5c <UART_SetConfig+0x118>
 8000e5a:	e065      	b.n	8000f28 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8000e5c:	231b      	movs	r3, #27
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d015      	beq.n	8000e92 <UART_SetConfig+0x14e>
 8000e66:	dc18      	bgt.n	8000e9a <UART_SetConfig+0x156>
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00d      	beq.n	8000e88 <UART_SetConfig+0x144>
 8000e6c:	dc15      	bgt.n	8000e9a <UART_SetConfig+0x156>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <UART_SetConfig+0x134>
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d005      	beq.n	8000e82 <UART_SetConfig+0x13e>
 8000e76:	e010      	b.n	8000e9a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8000e78:	f7ff fe54 	bl	8000b24 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	617b      	str	r3, [r7, #20]
        break;
 8000e80:	e012      	b.n	8000ea8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8000e82:	4b63      	ldr	r3, [pc, #396]	@ (8001010 <UART_SetConfig+0x2cc>)
 8000e84:	617b      	str	r3, [r7, #20]
        break;
 8000e86:	e00f      	b.n	8000ea8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8000e88:	f7ff fdc0 	bl	8000a0c <HAL_RCC_GetSysClockFreq>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	617b      	str	r3, [r7, #20]
        break;
 8000e90:	e00a      	b.n	8000ea8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	617b      	str	r3, [r7, #20]
        break;
 8000e98:	e006      	b.n	8000ea8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
        break;
 8000ea6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d100      	bne.n	8000eb0 <UART_SetConfig+0x16c>
 8000eae:	e08d      	b.n	8000fcc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eb4:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <UART_SetConfig+0x2d0>)
 8000eb6:	0052      	lsls	r2, r2, #1
 8000eb8:	5ad3      	ldrh	r3, [r2, r3]
 8000eba:	0019      	movs	r1, r3
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff f927 	bl	8000110 <__udivsi3>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	005a      	lsls	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	18d2      	adds	r2, r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	0010      	movs	r0, r2
 8000ed6:	f7ff f91b 	bl	8000110 <__udivsi3>
 8000eda:	0003      	movs	r3, r0
 8000edc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d91c      	bls.n	8000f1e <UART_SetConfig+0x1da>
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d217      	bcs.n	8000f1e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	200e      	movs	r0, #14
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	438a      	bics	r2, r1
 8000efa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	085b      	lsrs	r3, r3, #1
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2207      	movs	r2, #7
 8000f04:	4013      	ands	r3, r2
 8000f06:	b299      	uxth	r1, r3
 8000f08:	183b      	adds	r3, r7, r0
 8000f0a:	183a      	adds	r2, r7, r0
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	183a      	adds	r2, r7, r0
 8000f18:	8812      	ldrh	r2, [r2, #0]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	e056      	b.n	8000fcc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8000f1e:	231a      	movs	r3, #26
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e051      	b.n	8000fcc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8000f28:	231b      	movs	r3, #27
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d015      	beq.n	8000f5e <UART_SetConfig+0x21a>
 8000f32:	dc18      	bgt.n	8000f66 <UART_SetConfig+0x222>
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00d      	beq.n	8000f54 <UART_SetConfig+0x210>
 8000f38:	dc15      	bgt.n	8000f66 <UART_SetConfig+0x222>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <UART_SetConfig+0x200>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <UART_SetConfig+0x20a>
 8000f42:	e010      	b.n	8000f66 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8000f44:	f7ff fdee 	bl	8000b24 <HAL_RCC_GetPCLK1Freq>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	617b      	str	r3, [r7, #20]
        break;
 8000f4c:	e012      	b.n	8000f74 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <UART_SetConfig+0x2cc>)
 8000f50:	617b      	str	r3, [r7, #20]
        break;
 8000f52:	e00f      	b.n	8000f74 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8000f54:	f7ff fd5a 	bl	8000a0c <HAL_RCC_GetSysClockFreq>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	617b      	str	r3, [r7, #20]
        break;
 8000f5c:	e00a      	b.n	8000f74 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	617b      	str	r3, [r7, #20]
        break;
 8000f64:	e006      	b.n	8000f74 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8000f6a:	231a      	movs	r3, #26
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
        break;
 8000f72:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d028      	beq.n	8000fcc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <UART_SetConfig+0x2d0>)
 8000f80:	0052      	lsls	r2, r2, #1
 8000f82:	5ad3      	ldrh	r3, [r2, r3]
 8000f84:	0019      	movs	r1, r3
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff f8c2 	bl	8000110 <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	001a      	movs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	18d2      	adds	r2, r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	0010      	movs	r0, r2
 8000fa0:	f7ff f8b6 	bl	8000110 <__udivsi3>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	d90a      	bls.n	8000fc4 <UART_SetConfig+0x280>
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d205      	bcs.n	8000fc4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	e003      	b.n	8000fcc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8000fc4:	231a      	movs	r3, #26
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	226a      	movs	r2, #106	@ 0x6a
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2268      	movs	r2, #104	@ 0x68
 8000fd8:	2101      	movs	r1, #1
 8000fda:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8000fe8:	231a      	movs	r3, #26
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	781b      	ldrb	r3, [r3, #0]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b008      	add	sp, #32
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	cfff69f3 	.word	0xcfff69f3
 8000ffc:	ffffcfff 	.word	0xffffcfff
 8001000:	11fff4ff 	.word	0x11fff4ff
 8001004:	40013800 	.word	0x40013800
 8001008:	40021000 	.word	0x40021000
 800100c:	40004400 	.word	0x40004400
 8001010:	00f42400 	.word	0x00f42400
 8001014:	08001520 	.word	0x08001520

08001018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001024:	2208      	movs	r2, #8
 8001026:	4013      	ands	r3, r2
 8001028:	d00b      	beq.n	8001042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	@ (800115c <UART_AdvFeatureConfig+0x144>)
 8001032:	4013      	ands	r3, r2
 8001034:	0019      	movs	r1, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	d00b      	beq.n	8001064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a43      	ldr	r2, [pc, #268]	@ (8001160 <UART_AdvFeatureConfig+0x148>)
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d00b      	beq.n	8001086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a3b      	ldr	r2, [pc, #236]	@ (8001164 <UART_AdvFeatureConfig+0x14c>)
 8001076:	4013      	ands	r3, r2
 8001078:	0019      	movs	r1, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108a:	2204      	movs	r2, #4
 800108c:	4013      	ands	r3, r2
 800108e:	d00b      	beq.n	80010a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <UART_AdvFeatureConfig+0x150>)
 8001098:	4013      	ands	r3, r2
 800109a:	0019      	movs	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ac:	2210      	movs	r2, #16
 80010ae:	4013      	ands	r3, r2
 80010b0:	d00b      	beq.n	80010ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a2c      	ldr	r2, [pc, #176]	@ (800116c <UART_AdvFeatureConfig+0x154>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ce:	2220      	movs	r2, #32
 80010d0:	4013      	ands	r3, r2
 80010d2:	d00b      	beq.n	80010ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4a25      	ldr	r2, [pc, #148]	@ (8001170 <UART_AdvFeatureConfig+0x158>)
 80010dc:	4013      	ands	r3, r2
 80010de:	0019      	movs	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f0:	2240      	movs	r2, #64	@ 0x40
 80010f2:	4013      	ands	r3, r2
 80010f4:	d01d      	beq.n	8001132 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <UART_AdvFeatureConfig+0x15c>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	429a      	cmp	r2, r3
 8001118:	d10b      	bne.n	8001132 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <UART_AdvFeatureConfig+0x160>)
 8001122:	4013      	ands	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	4013      	ands	r3, r2
 800113a:	d00b      	beq.n	8001154 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <UART_AdvFeatureConfig+0x164>)
 8001144:	4013      	ands	r3, r2
 8001146:	0019      	movs	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
  }
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	ffff7fff 	.word	0xffff7fff
 8001160:	fffdffff 	.word	0xfffdffff
 8001164:	fffeffff 	.word	0xfffeffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffffefff 	.word	0xffffefff
 8001170:	ffffdfff 	.word	0xffffdfff
 8001174:	ffefffff 	.word	0xffefffff
 8001178:	ff9fffff 	.word	0xff9fffff
 800117c:	fff7ffff 	.word	0xfff7ffff

08001180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b092      	sub	sp, #72	@ 0x48
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2290      	movs	r2, #144	@ 0x90
 800118c:	2100      	movs	r1, #0
 800118e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001190:	f7ff f9b4 	bl	80004fc <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2208      	movs	r2, #8
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d12d      	bne.n	8001202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80011a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	0391      	lsls	r1, r2, #14
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4a47      	ldr	r2, [pc, #284]	@ (80012cc <UART_CheckIdleState+0x14c>)
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f000 f88e 	bl	80012d4 <UART_WaitOnFlagUntilTimeout>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d022      	beq.n	8001202 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011bc:	f3ef 8310 	mrs	r3, PRIMASK
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	f383 8810 	msr	PRIMASK, r3
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e8:	f383 8810 	msr	PRIMASK, r3
}
 80011ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2288      	movs	r2, #136	@ 0x88
 80011f2:	2120      	movs	r1, #32
 80011f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2284      	movs	r2, #132	@ 0x84
 80011fa:	2100      	movs	r1, #0
 80011fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e060      	b.n	80012c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2204      	movs	r2, #4
 800120a:	4013      	ands	r3, r2
 800120c:	2b04      	cmp	r3, #4
 800120e:	d146      	bne.n	800129e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	03d1      	lsls	r1, r2, #15
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4a2c      	ldr	r2, [pc, #176]	@ (80012cc <UART_CheckIdleState+0x14c>)
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	f000 f859 	bl	80012d4 <UART_WaitOnFlagUntilTimeout>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d03b      	beq.n	800129e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001226:	f3ef 8310 	mrs	r3, PRIMASK
 800122a:	60fb      	str	r3, [r7, #12]
  return(result);
 800122c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f383 8810 	msr	PRIMASK, r3
}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4922      	ldr	r1, [pc, #136]	@ (80012d0 <UART_CheckIdleState+0x150>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800124e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f383 8810 	msr	PRIMASK, r3
}
 8001256:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001258:	f3ef 8310 	mrs	r3, PRIMASK
 800125c:	61bb      	str	r3, [r7, #24]
  return(result);
 800125e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001260:	633b      	str	r3, [r7, #48]	@ 0x30
 8001262:	2301      	movs	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f383 8810 	msr	PRIMASK, r3
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f383 8810 	msr	PRIMASK, r3
}
 8001288:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	228c      	movs	r2, #140	@ 0x8c
 800128e:	2120      	movs	r1, #32
 8001290:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2284      	movs	r2, #132	@ 0x84
 8001296:	2100      	movs	r1, #0
 8001298:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e012      	b.n	80012c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2288      	movs	r2, #136	@ 0x88
 80012a2:	2120      	movs	r1, #32
 80012a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	228c      	movs	r2, #140	@ 0x8c
 80012aa:	2120      	movs	r1, #32
 80012ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2284      	movs	r2, #132	@ 0x84
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b010      	add	sp, #64	@ 0x40
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	01ffffff 	.word	0x01ffffff
 80012d0:	fffffedf 	.word	0xfffffedf

080012d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012e4:	e051      	b.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	3301      	adds	r3, #1
 80012ea:	d04e      	beq.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ec:	f7ff f906 	bl	80004fc <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d302      	bcc.n	8001302 <UART_WaitOnFlagUntilTimeout+0x2e>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e051      	b.n	80013aa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2204      	movs	r2, #4
 800130e:	4013      	ands	r3, r2
 8001310:	d03b      	beq.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b80      	cmp	r3, #128	@ 0x80
 8001316:	d038      	beq.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b40      	cmp	r3, #64	@ 0x40
 800131c:	d035      	beq.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2208      	movs	r2, #8
 8001326:	4013      	ands	r3, r2
 8001328:	2b08      	cmp	r3, #8
 800132a:	d111      	bne.n	8001350 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2208      	movs	r2, #8
 8001332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f83c 	bl	80013b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2290      	movs	r2, #144	@ 0x90
 8001340:	2108      	movs	r1, #8
 8001342:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2284      	movs	r2, #132	@ 0x84
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e02c      	b.n	80013aa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	401a      	ands	r2, r3
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	429a      	cmp	r2, r3
 8001362:	d112      	bne.n	800138a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 f81f 	bl	80013b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2290      	movs	r2, #144	@ 0x90
 800137a:	2120      	movs	r1, #32
 800137c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2284      	movs	r2, #132	@ 0x84
 8001382:	2100      	movs	r1, #0
 8001384:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e00f      	b.n	80013aa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	4013      	ands	r3, r2
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	425a      	negs	r2, r3
 800139a:	4153      	adcs	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	001a      	movs	r2, r3
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d09e      	beq.n	80012e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013bc:	f3ef 8310 	mrs	r3, PRIMASK
 80013c0:	617b      	str	r3, [r7, #20]
  return(result);
 80013c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f383 8810 	msr	PRIMASK, r3
}
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4926      	ldr	r1, [pc, #152]	@ (8001478 <UART_EndRxTransfer+0xc4>)
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f383 8810 	msr	PRIMASK, r3
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013ee:	f3ef 8310 	mrs	r3, PRIMASK
 80013f2:	623b      	str	r3, [r7, #32]
  return(result);
 80013f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80013f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013f8:	2301      	movs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	f383 8810 	msr	PRIMASK, r3
}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	491b      	ldr	r1, [pc, #108]	@ (800147c <UART_EndRxTransfer+0xc8>)
 8001410:	400a      	ands	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141a:	f383 8810 	msr	PRIMASK, r3
}
 800141e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d118      	bne.n	800145a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001428:	f3ef 8310 	mrs	r3, PRIMASK
 800142c:	60bb      	str	r3, [r7, #8]
  return(result);
 800142e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001432:	2301      	movs	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f383 8810 	msr	PRIMASK, r3
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2110      	movs	r1, #16
 800144a:	438a      	bics	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f383 8810 	msr	PRIMASK, r3
}
 8001458:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	228c      	movs	r2, #140	@ 0x8c
 800145e:	2120      	movs	r1, #32
 8001460:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b00e      	add	sp, #56	@ 0x38
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	fffffedf 	.word	0xfffffedf
 800147c:	effffffe 	.word	0xeffffffe

08001480 <__libc_init_array>:
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	2600      	movs	r6, #0
 8001484:	4c0c      	ldr	r4, [pc, #48]	@ (80014b8 <__libc_init_array+0x38>)
 8001486:	4d0d      	ldr	r5, [pc, #52]	@ (80014bc <__libc_init_array+0x3c>)
 8001488:	1b64      	subs	r4, r4, r5
 800148a:	10a4      	asrs	r4, r4, #2
 800148c:	42a6      	cmp	r6, r4
 800148e:	d109      	bne.n	80014a4 <__libc_init_array+0x24>
 8001490:	2600      	movs	r6, #0
 8001492:	f000 f819 	bl	80014c8 <_init>
 8001496:	4c0a      	ldr	r4, [pc, #40]	@ (80014c0 <__libc_init_array+0x40>)
 8001498:	4d0a      	ldr	r5, [pc, #40]	@ (80014c4 <__libc_init_array+0x44>)
 800149a:	1b64      	subs	r4, r4, r5
 800149c:	10a4      	asrs	r4, r4, #2
 800149e:	42a6      	cmp	r6, r4
 80014a0:	d105      	bne.n	80014ae <__libc_init_array+0x2e>
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
 80014a4:	00b3      	lsls	r3, r6, #2
 80014a6:	58eb      	ldr	r3, [r5, r3]
 80014a8:	4798      	blx	r3
 80014aa:	3601      	adds	r6, #1
 80014ac:	e7ee      	b.n	800148c <__libc_init_array+0xc>
 80014ae:	00b3      	lsls	r3, r6, #2
 80014b0:	58eb      	ldr	r3, [r5, r3]
 80014b2:	4798      	blx	r3
 80014b4:	3601      	adds	r6, #1
 80014b6:	e7f2      	b.n	800149e <__libc_init_array+0x1e>
 80014b8:	08001538 	.word	0x08001538
 80014bc:	08001538 	.word	0x08001538
 80014c0:	0800153c 	.word	0x0800153c
 80014c4:	08001538 	.word	0x08001538

080014c8 <_init>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ce:	bc08      	pop	{r3}
 80014d0:	469e      	mov	lr, r3
 80014d2:	4770      	bx	lr

080014d4 <_fini>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr
